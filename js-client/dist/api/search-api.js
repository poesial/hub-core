"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchApi = exports.SearchApiFactory = exports.SearchApiFp = exports.SearchApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * SearchApi - axios parameter creator
 * @export
 */
exports.SearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete a saved search entry by ID.
         * @summary Delete saved search
         * @param {string} savedSearchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavedSearchesSavedSearchId: (savedSearchId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'savedSearchId' is not null or undefined
            if (savedSearchId === null || savedSearchId === undefined) {
                throw new base_1.RequiredError('savedSearchId', 'Required parameter savedSearchId was null or undefined when calling deleteSavedSearchesSavedSearchId.');
            }
            const localVarPath = `/saved-searches/{savedSearchId}`
                .replace(`{${"savedSearchId"}}`, encodeURIComponent(String(savedSearchId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of current saved searches for products
         * @summary Get saved searches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedSearches: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/saved-searches/product`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
         * @summary Search GetCandy
         * @param {string} [channel]
         * @param {string} [category]
         * @param {number} [page]
         * @param {'categories' | 'products'} [searchType]
         * @param {string} [term]
         * @param {boolean} [rank] Whether to rank results based on config
         * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
         * @param {string} [include]
         * @param {string} [sort]
         * @param {boolean} [fullResponse]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearch: (channel, category, page, searchType, term, rank, idsOnly, include, sort, fullResponse, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }
            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }
            if (rank !== undefined) {
                localVarQueryParameter['rank'] = rank;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (fullResponse !== undefined) {
                localVarQueryParameter['full_response'] = fullResponse;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get saved search
         * @param {string} savedSearchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savedSearchesSavedSearchIdGet: (savedSearchId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'savedSearchId' is not null or undefined
            if (savedSearchId === null || savedSearchId === undefined) {
                throw new base_1.RequiredError('savedSearchId', 'Required parameter savedSearchId was null or undefined when calling savedSearchesSavedSearchIdGet.');
            }
            const localVarPath = `/saved-searches/{savedSearchId}`
                .replace(`{${"savedSearchId"}}`, encodeURIComponent(String(savedSearchId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SearchApi - functional programming interface
 * @export
 */
exports.SearchApiFp = function (configuration) {
    return {
        /**
         * Delete a saved search entry by ID.
         * @summary Delete saved search
         * @param {string} savedSearchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavedSearchesSavedSearchId(savedSearchId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SearchApiAxiosParamCreator(configuration).deleteSavedSearchesSavedSearchId(savedSearchId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a list of current saved searches for products
         * @summary Get saved searches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedSearches(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SearchApiAxiosParamCreator(configuration).getSavedSearches(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
         * @summary Search GetCandy
         * @param {string} [channel]
         * @param {string} [category]
         * @param {number} [page]
         * @param {'categories' | 'products'} [searchType]
         * @param {string} [term]
         * @param {boolean} [rank] Whether to rank results based on config
         * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
         * @param {string} [include]
         * @param {string} [sort]
         * @param {boolean} [fullResponse]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearch(channel, category, page, searchType, term, rank, idsOnly, include, sort, fullResponse, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SearchApiAxiosParamCreator(configuration).getSearch(channel, category, page, searchType, term, rank, idsOnly, include, sort, fullResponse, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Get saved search
         * @param {string} savedSearchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savedSearchesSavedSearchIdGet(savedSearchId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SearchApiAxiosParamCreator(configuration).savedSearchesSavedSearchIdGet(savedSearchId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * SearchApi - factory interface
 * @export
 */
exports.SearchApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Delete a saved search entry by ID.
         * @summary Delete saved search
         * @param {string} savedSearchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavedSearchesSavedSearchId(savedSearchId, options) {
            return exports.SearchApiFp(configuration).deleteSavedSearchesSavedSearchId(savedSearchId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of current saved searches for products
         * @summary Get saved searches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedSearches(options) {
            return exports.SearchApiFp(configuration).getSavedSearches(options).then((request) => request(axios, basePath));
        },
        /**
         * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
         * @summary Search GetCandy
         * @param {string} [channel]
         * @param {string} [category]
         * @param {number} [page]
         * @param {'categories' | 'products'} [searchType]
         * @param {string} [term]
         * @param {boolean} [rank] Whether to rank results based on config
         * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
         * @param {string} [include]
         * @param {string} [sort]
         * @param {boolean} [fullResponse]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearch(channel, category, page, searchType, term, rank, idsOnly, include, sort, fullResponse, options) {
            return exports.SearchApiFp(configuration).getSearch(channel, category, page, searchType, term, rank, idsOnly, include, sort, fullResponse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get saved search
         * @param {string} savedSearchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savedSearchesSavedSearchIdGet(savedSearchId, options) {
            return exports.SearchApiFp(configuration).savedSearchesSavedSearchIdGet(savedSearchId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
class SearchApi extends base_1.BaseAPI {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    deleteSavedSearchesSavedSearchId(savedSearchId, options) {
        return exports.SearchApiFp(this.configuration).deleteSavedSearchesSavedSearchId(savedSearchId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    getSavedSearches(options) {
        return exports.SearchApiFp(this.configuration).getSavedSearches(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'categories' | 'products'} [searchType]
     * @param {string} [term]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {boolean} [fullResponse]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    getSearch(channel, category, page, searchType, term, rank, idsOnly, include, sort, fullResponse, options) {
        return exports.SearchApiFp(this.configuration).getSearch(channel, category, page, searchType, term, rank, idsOnly, include, sort, fullResponse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    savedSearchesSavedSearchIdGet(savedSearchId, options) {
        return exports.SearchApiFp(this.configuration).savedSearchesSavedSearchIdGet(savedSearchId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SearchApi = SearchApi;
