"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributesApi = exports.AttributesApiFactory = exports.AttributesApiFp = exports.AttributesApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * AttributesApi - axios parameter creator
 * @export
 */
exports.AttributesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes an attribute group
         * @summary Delete an attribute group
         * @param {string} attributeGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributeGroupsAttributeGroupId: (attributeGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeGroupId' is not null or undefined
            if (attributeGroupId === null || attributeGroupId === undefined) {
                throw new base_1.RequiredError('attributeGroupId', 'Required parameter attributeGroupId was null or undefined when calling deleteAttributeGroupsAttributeGroupId.');
            }
            const localVarPath = `/attribute-groups/{attributeGroupId}`
                .replace(`{${"attributeGroupId"}}`, encodeURIComponent(String(attributeGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an attribute.
         * @summary Delete an attribute
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributesAttributeId: (attributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new base_1.RequiredError('attributeId', 'Required parameter attributeId was null or undefined when calling deleteAttributesAttributeId.');
            }
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a paginated list of available attribute groups
         * @summary Paginated list of Attribute Groups
         * @param {boolean} [allRecords] Will skip pagination and return all records
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroups: (allRecords, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/attribute-groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (allRecords !== undefined) {
                localVarQueryParameter['all_records'] = allRecords;
            }
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets a single attribute group
         * @summary Get a single attribute group
         * @param {string} attributeGroupId
         * @param {number} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroupsAttributeGroupId: (attributeGroupId, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeGroupId' is not null or undefined
            if (attributeGroupId === null || attributeGroupId === undefined) {
                throw new base_1.RequiredError('attributeGroupId', 'Required parameter attributeGroupId was null or undefined when calling getAttributeGroupsAttributeGroupId.');
            }
            const localVarPath = `/attribute-groups/{attributeGroupId}`
                .replace(`{${"attributeGroupId"}}`, encodeURIComponent(String(attributeGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Return a paged array of attributes
         * @summary Get Attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns an attribute from a given ID.
         * @summary Get an attribute
         * @param {string} attributeId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeId: (attributeId, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new base_1.RequiredError('attributeId', 'Required parameter attributeId was null or undefined when calling getAttributesAttributeId.');
            }
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create an Attribute Group
         * @param {CreateAttributeGroupBodyName} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributeGroups: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/attribute-groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            if (name !== undefined) {
                localVarFormParams.append('name', name);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new attribute
         * @summary Create Attribute
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributes: (inlineObject, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an attribute group.
         * @summary Update an attribute group
         * @param {string} attributeGroupId
         * @param {AttributeGroup} [attributeGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsAttributeGroupId: (attributeGroupId, attributeGroup, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeGroupId' is not null or undefined
            if (attributeGroupId === null || attributeGroupId === undefined) {
                throw new base_1.RequiredError('attributeGroupId', 'Required parameter attributeGroupId was null or undefined when calling putAttributeGroupsAttributeGroupId.');
            }
            const localVarPath = `/attribute-groups/{attributeGroupId}`
                .replace(`{${"attributeGroupId"}}`, encodeURIComponent(String(attributeGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof attributeGroup !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(attributeGroup !== undefined ? attributeGroup : {}) : (attributeGroup || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Sends a request to reorder the attribute groups in the system
         * @summary Reorder attribute groups
         * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsReorder: (attributeGroupReorderBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/attribute-groups/reorder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof attributeGroupReorderBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(attributeGroupReorderBody !== undefined ? attributeGroupReorderBody : {}) : (attributeGroupReorderBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an attribute from a given ID.
         * @summary Update an attribute
         * @param {string} attributeId
         * @param {UpdateAttributesBody} [updateAttributesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesAttributeId: (attributeId, updateAttributesBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new base_1.RequiredError('attributeId', 'Required parameter attributeId was null or undefined when calling putAttributesAttributeId.');
            }
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof updateAttributesBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateAttributesBody !== undefined ? updateAttributesBody : {}) : (updateAttributesBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Allows you to reorder a target category in relation to another.
         * @summary Update request to reorder attributes
         * @param {AttributesReorderBody} [attributesReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesOrder: (attributesReorderBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/attributes/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof attributesReorderBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(attributesReorderBody !== undefined ? attributesReorderBody : {}) : (attributesReorderBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AttributesApi - functional programming interface
 * @export
 */
exports.AttributesApiFp = function (configuration) {
    return {
        /**
         * Deletes an attribute group
         * @summary Delete an attribute group
         * @param {string} attributeGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributeGroupsAttributeGroupId(attributeGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).deleteAttributeGroupsAttributeGroupId(attributeGroupId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an attribute.
         * @summary Delete an attribute
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributesAttributeId(attributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).deleteAttributesAttributeId(attributeId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a paginated list of available attribute groups
         * @summary Paginated list of Attribute Groups
         * @param {boolean} [allRecords] Will skip pagination and return all records
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroups(allRecords, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).getAttributeGroups(allRecords, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Gets a single attribute group
         * @summary Get a single attribute group
         * @param {string} attributeGroupId
         * @param {number} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroupsAttributeGroupId(attributeGroupId, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).getAttributeGroupsAttributeGroupId(attributeGroupId, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Return a paged array of attributes
         * @summary Get Attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).getAttributes(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns an attribute from a given ID.
         * @summary Get an attribute
         * @param {string} attributeId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeId(attributeId, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).getAttributesAttributeId(attributeId, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Create an Attribute Group
         * @param {CreateAttributeGroupBodyName} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributeGroups(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).postAttributeGroups(name, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new attribute
         * @summary Create Attribute
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributes(inlineObject, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).postAttributes(inlineObject, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Updates an attribute group.
         * @summary Update an attribute group
         * @param {string} attributeGroupId
         * @param {AttributeGroup} [attributeGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Sends a request to reorder the attribute groups in the system
         * @summary Reorder attribute groups
         * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsReorder(attributeGroupReorderBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).putAttributeGroupsReorder(attributeGroupReorderBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Updates an attribute from a given ID.
         * @summary Update an attribute
         * @param {string} attributeId
         * @param {UpdateAttributesBody} [updateAttributesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesAttributeId(attributeId, updateAttributesBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).putAttributesAttributeId(attributeId, updateAttributesBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Allows you to reorder a target category in relation to another.
         * @summary Update request to reorder attributes
         * @param {AttributesReorderBody} [attributesReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesOrder(attributesReorderBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AttributesApiAxiosParamCreator(configuration).putAttributesOrder(attributesReorderBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * AttributesApi - factory interface
 * @export
 */
exports.AttributesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Deletes an attribute group
         * @summary Delete an attribute group
         * @param {string} attributeGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributeGroupsAttributeGroupId(attributeGroupId, options) {
            return exports.AttributesApiFp(configuration).deleteAttributeGroupsAttributeGroupId(attributeGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an attribute.
         * @summary Delete an attribute
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributesAttributeId(attributeId, options) {
            return exports.AttributesApiFp(configuration).deleteAttributesAttributeId(attributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of available attribute groups
         * @summary Paginated list of Attribute Groups
         * @param {boolean} [allRecords] Will skip pagination and return all records
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroups(allRecords, include, options) {
            return exports.AttributesApiFp(configuration).getAttributeGroups(allRecords, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single attribute group
         * @summary Get a single attribute group
         * @param {string} attributeGroupId
         * @param {number} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroupsAttributeGroupId(attributeGroupId, include, options) {
            return exports.AttributesApiFp(configuration).getAttributeGroupsAttributeGroupId(attributeGroupId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a paged array of attributes
         * @summary Get Attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(options) {
            return exports.AttributesApiFp(configuration).getAttributes(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an attribute from a given ID.
         * @summary Get an attribute
         * @param {string} attributeId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeId(attributeId, include, options) {
            return exports.AttributesApiFp(configuration).getAttributesAttributeId(attributeId, include, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create an Attribute Group
         * @param {CreateAttributeGroupBodyName} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributeGroups(name, options) {
            return exports.AttributesApiFp(configuration).postAttributeGroups(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new attribute
         * @summary Create Attribute
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributes(inlineObject, options) {
            return exports.AttributesApiFp(configuration).postAttributes(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an attribute group.
         * @summary Update an attribute group
         * @param {string} attributeGroupId
         * @param {AttributeGroup} [attributeGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options) {
            return exports.AttributesApiFp(configuration).putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a request to reorder the attribute groups in the system
         * @summary Reorder attribute groups
         * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsReorder(attributeGroupReorderBody, options) {
            return exports.AttributesApiFp(configuration).putAttributeGroupsReorder(attributeGroupReorderBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an attribute from a given ID.
         * @summary Update an attribute
         * @param {string} attributeId
         * @param {UpdateAttributesBody} [updateAttributesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesAttributeId(attributeId, updateAttributesBody, options) {
            return exports.AttributesApiFp(configuration).putAttributesAttributeId(attributeId, updateAttributesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows you to reorder a target category in relation to another.
         * @summary Update request to reorder attributes
         * @param {AttributesReorderBody} [attributesReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesOrder(attributesReorderBody, options) {
            return exports.AttributesApiFp(configuration).putAttributesOrder(attributesReorderBody, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
class AttributesApi extends base_1.BaseAPI {
    /**
     * Deletes an attribute group
     * @summary Delete an attribute group
     * @param {string} attributeGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    deleteAttributeGroupsAttributeGroupId(attributeGroupId, options) {
        return exports.AttributesApiFp(this.configuration).deleteAttributeGroupsAttributeGroupId(attributeGroupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an attribute.
     * @summary Delete an attribute
     * @param {string} attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    deleteAttributesAttributeId(attributeId, options) {
        return exports.AttributesApiFp(this.configuration).deleteAttributesAttributeId(attributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a paginated list of available attribute groups
     * @summary Paginated list of Attribute Groups
     * @param {boolean} [allRecords] Will skip pagination and return all records
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributeGroups(allRecords, include, options) {
        return exports.AttributesApiFp(this.configuration).getAttributeGroups(allRecords, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single attribute group
     * @summary Get a single attribute group
     * @param {string} attributeGroupId
     * @param {number} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributeGroupsAttributeGroupId(attributeGroupId, include, options) {
        return exports.AttributesApiFp(this.configuration).getAttributeGroupsAttributeGroupId(attributeGroupId, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return a paged array of attributes
     * @summary Get Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributes(options) {
        return exports.AttributesApiFp(this.configuration).getAttributes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an attribute from a given ID.
     * @summary Get an attribute
     * @param {string} attributeId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributesAttributeId(attributeId, include, options) {
        return exports.AttributesApiFp(this.configuration).getAttributesAttributeId(attributeId, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create an Attribute Group
     * @param {CreateAttributeGroupBodyName} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    postAttributeGroups(name, options) {
        return exports.AttributesApiFp(this.configuration).postAttributeGroups(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new attribute
     * @summary Create Attribute
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    postAttributes(inlineObject, options) {
        return exports.AttributesApiFp(this.configuration).postAttributes(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an attribute group.
     * @summary Update an attribute group
     * @param {string} attributeGroupId
     * @param {AttributeGroup} [attributeGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options) {
        return exports.AttributesApiFp(this.configuration).putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sends a request to reorder the attribute groups in the system
     * @summary Reorder attribute groups
     * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributeGroupsReorder(attributeGroupReorderBody, options) {
        return exports.AttributesApiFp(this.configuration).putAttributeGroupsReorder(attributeGroupReorderBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an attribute from a given ID.
     * @summary Update an attribute
     * @param {string} attributeId
     * @param {UpdateAttributesBody} [updateAttributesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributesAttributeId(attributeId, updateAttributesBody, options) {
        return exports.AttributesApiFp(this.configuration).putAttributesAttributeId(attributeId, updateAttributesBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows you to reorder a target category in relation to another.
     * @summary Update request to reorder attributes
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributesOrder(attributesReorderBody, options) {
        return exports.AttributesApiFp(this.configuration).putAttributesOrder(attributesReorderBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AttributesApi = AttributesApi;
