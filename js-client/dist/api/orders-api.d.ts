/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Address } from '../models';
import { CreateOrderBody } from '../models';
import { EmailPreviewResponse } from '../models';
import { InlineObject10 } from '../models';
import { InlineObject11 } from '../models';
import { InlineObject12 } from '../models';
import { InlineObject7 } from '../models';
import { InlineObject8 } from '../models';
import { InlineObject9 } from '../models';
import { InvoiceResponse } from '../models';
import { OrderCollection } from '../models';
import { OrderExportResponse } from '../models';
import { OrderResponse } from '../models';
import { OrderTypeCollection } from '../models';
import { ShippingPriceCollection } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrdersLinesOrderId: (orderLineId: string, options?: any) => Promise<RequestArgs>;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders: (include?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersBulk: (orders: '1sfe534r4ref:934redfk', format: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} id An order id to use for the template
     * @param {string} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersEmailPreviewStatus: (id: string, status: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdInvoice: (orderId: string, options?: any) => Promise<RequestArgs>;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdShippingMethods: (orderId: string, include?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersOrderId: (orderId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersTypes: (options?: any) => Promise<RequestArgs>;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrders: (createOrderBody?: CreateOrderBody, options?: any) => Promise<RequestArgs>;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersBulk: (inlineObject9?: InlineObject9, options?: any) => Promise<RequestArgs>;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersOrderIdExpire: (orderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersProcess: (inlineObject8?: InlineObject8, options?: any) => Promise<RequestArgs>;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdContact: (orderId: string, inlineObject11?: InlineObject11, options?: any) => Promise<RequestArgs>;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdLines: (orderId: string, inlineObject12?: InlineObject12, options?: any) => Promise<RequestArgs>;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingAddress: (orderId: string, address?: Address, options?: any) => Promise<RequestArgs>;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingCost: (orderId: string, include?: string, inlineObject10?: InlineObject10, options?: any) => Promise<RequestArgs>;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderId: (orderId: string, include?: string, inlineObject7?: InlineObject7, options?: any) => Promise<RequestArgs>;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderIdBillingAddress: (orderId: string, address?: Address, options?: any) => Promise<RequestArgs>;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrdersLinesOrderId(orderLineId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders(include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderCollection>>;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersBulk(orders: '1sfe534r4ref:934redfk', format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderExportResponse>>;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} id An order id to use for the template
     * @param {string} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersEmailPreviewStatus(id: string, status: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailPreviewResponse>>;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdInvoice(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResponse>>;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdShippingMethods(orderId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingPriceCollection>>;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersOrderId(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderTypeCollection>>;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrders(createOrderBody?: CreateOrderBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersBulk(inlineObject9?: InlineObject9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersOrderIdExpire(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersProcess(inlineObject8?: InlineObject8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdContact(orderId: string, inlineObject11?: InlineObject11, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdLines(orderId: string, inlineObject12?: InlineObject12, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingAddress(orderId: string, address?: Address, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingCost(orderId: string, include?: string, inlineObject10?: InlineObject10, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderId(orderId: string, include?: string, inlineObject7?: InlineObject7, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderIdBillingAddress(orderId: string, address?: Address, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrdersLinesOrderId(orderLineId: string, options?: any): AxiosPromise<void>;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders(include?: string, options?: any): AxiosPromise<OrderCollection>;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersBulk(orders: '1sfe534r4ref:934redfk', format: string, options?: any): AxiosPromise<OrderExportResponse>;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} id An order id to use for the template
     * @param {string} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersEmailPreviewStatus(id: string, status: string, options?: any): AxiosPromise<EmailPreviewResponse>;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdInvoice(orderId: string, options?: any): AxiosPromise<InvoiceResponse>;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdShippingMethods(orderId: string, include?: string, options?: any): AxiosPromise<ShippingPriceCollection>;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersOrderId(orderId: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersTypes(options?: any): AxiosPromise<OrderTypeCollection>;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrders(createOrderBody?: CreateOrderBody, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersBulk(inlineObject9?: InlineObject9, options?: any): AxiosPromise<void>;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersOrderIdExpire(orderId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersProcess(inlineObject8?: InlineObject8, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdContact(orderId: string, inlineObject11?: InlineObject11, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdLines(orderId: string, inlineObject12?: InlineObject12, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingAddress(orderId: string, address?: Address, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingCost(orderId: string, include?: string, inlineObject10?: InlineObject10, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderId(orderId: string, include?: string, inlineObject7?: InlineObject7, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderIdBillingAddress(orderId: string, address?: Address, options?: any): AxiosPromise<OrderResponse>;
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    deleteOrdersLinesOrderId(orderLineId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrders(include?: string, options?: any): Promise<import("axios").AxiosResponse<OrderCollection, any>>;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersBulk(orders: '1sfe534r4ref:934redfk', format: string, options?: any): Promise<import("axios").AxiosResponse<OrderExportResponse, any>>;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} id An order id to use for the template
     * @param {string} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersEmailPreviewStatus(id: string, status: string, options?: any): Promise<import("axios").AxiosResponse<EmailPreviewResponse, any>>;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersIdInvoice(orderId: string, options?: any): Promise<import("axios").AxiosResponse<InvoiceResponse, any>>;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersIdShippingMethods(orderId: string, include?: string, options?: any): Promise<import("axios").AxiosResponse<ShippingPriceCollection, any>>;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersOrderId(orderId: string, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersTypes(options?: any): Promise<import("axios").AxiosResponse<OrderTypeCollection, any>>;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrders(createOrderBody?: CreateOrderBody, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersBulk(inlineObject9?: InlineObject9, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersOrderIdExpire(orderId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersProcess(inlineObject8?: InlineObject8, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdContact(orderId: string, inlineObject11?: InlineObject11, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdLines(orderId: string, inlineObject12?: InlineObject12, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdShippingAddress(orderId: string, address?: Address, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdShippingCost(orderId: string, include?: string, inlineObject10?: InlineObject10, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersOrderId(orderId: string, include?: string, inlineObject7?: InlineObject7, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersOrderIdBillingAddress(orderId: string, address?: Address, options?: any): Promise<import("axios").AxiosResponse<OrderResponse, any>>;
}
