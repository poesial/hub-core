"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentsApi = exports.PaymentsApiFactory = exports.PaymentsApiFp = exports.PaymentsApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
exports.PaymentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Gets a payment provider from the given handle
         * @summary Get Payment Provider by it\'s handle
         * @param {string} handle
         * @param {string} [orderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentProvider: (handle, orderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'handle' is not null or undefined
            if (handle === null || handle === undefined) {
                throw new base_1.RequiredError('handle', 'Required parameter handle was null or undefined when calling getPaymentProvider.');
            }
            const localVarPath = `/payments/providers/{handle}`
                .replace(`{${"handle"}}`, encodeURIComponent(String(handle)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the default, configured payment provider.
         * @summary Get Payment Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsProvider: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/payments/provider`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of available Payment Types in the system
         * @summary Payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsTypes: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/payments/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
         * @summary Threed Secure Payment
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPayments3dSecure: (inlineObject14, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/payments/3d-secure`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject14 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject14 !== undefined ? inlineObject14 : {}) : (inlineObject14 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Refund a transaction
         * @summary Refund a payment
         * @param {string} transactionId
         * @param {number} [amount] If left blank, the full amount will be refunded
         * @param {string} [notes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsIdRefund: (transactionId, amount, notes, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new base_1.RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling postPaymentsIdRefund.');
            }
            const localVarPath = `/payments/{transactionId}/refund`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            if (amount !== undefined) {
                localVarFormParams.append('amount', amount);
            }
            if (notes !== undefined) {
                localVarFormParams.append('notes', notes);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Voids a payment in the system.
         * @summary Void a payment
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsTransactionIdVoid: (transactionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new base_1.RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling postPaymentsTransactionIdVoid.');
            }
            const localVarPath = `/payments/{transactionId}/void`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
exports.PaymentsApiFp = function (configuration) {
    return {
        /**
         * Gets a payment provider from the given handle
         * @summary Get Payment Provider by it\'s handle
         * @param {string} handle
         * @param {string} [orderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentProvider(handle, orderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PaymentsApiAxiosParamCreator(configuration).getPaymentProvider(handle, orderId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Gets the default, configured payment provider.
         * @summary Get Payment Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsProvider(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PaymentsApiAxiosParamCreator(configuration).getPaymentsProvider(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a list of available Payment Types in the system
         * @summary Payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsTypes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PaymentsApiAxiosParamCreator(configuration).getPaymentsTypes(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
         * @summary Threed Secure Payment
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPayments3dSecure(inlineObject14, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PaymentsApiAxiosParamCreator(configuration).postPayments3dSecure(inlineObject14, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Refund a transaction
         * @summary Refund a payment
         * @param {string} transactionId
         * @param {number} [amount] If left blank, the full amount will be refunded
         * @param {string} [notes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsIdRefund(transactionId, amount, notes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PaymentsApiAxiosParamCreator(configuration).postPaymentsIdRefund(transactionId, amount, notes, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Voids a payment in the system.
         * @summary Void a payment
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsTransactionIdVoid(transactionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PaymentsApiAxiosParamCreator(configuration).postPaymentsTransactionIdVoid(transactionId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PaymentsApi - factory interface
 * @export
 */
exports.PaymentsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Gets a payment provider from the given handle
         * @summary Get Payment Provider by it\'s handle
         * @param {string} handle
         * @param {string} [orderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentProvider(handle, orderId, options) {
            return exports.PaymentsApiFp(configuration).getPaymentProvider(handle, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the default, configured payment provider.
         * @summary Get Payment Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsProvider(options) {
            return exports.PaymentsApiFp(configuration).getPaymentsProvider(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of available Payment Types in the system
         * @summary Payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsTypes(options) {
            return exports.PaymentsApiFp(configuration).getPaymentsTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
         * @summary Threed Secure Payment
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPayments3dSecure(inlineObject14, options) {
            return exports.PaymentsApiFp(configuration).postPayments3dSecure(inlineObject14, options).then((request) => request(axios, basePath));
        },
        /**
         * Refund a transaction
         * @summary Refund a payment
         * @param {string} transactionId
         * @param {number} [amount] If left blank, the full amount will be refunded
         * @param {string} [notes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsIdRefund(transactionId, amount, notes, options) {
            return exports.PaymentsApiFp(configuration).postPaymentsIdRefund(transactionId, amount, notes, options).then((request) => request(axios, basePath));
        },
        /**
         * Voids a payment in the system.
         * @summary Void a payment
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsTransactionIdVoid(transactionId, options) {
            return exports.PaymentsApiFp(configuration).postPaymentsTransactionIdVoid(transactionId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
class PaymentsApi extends base_1.BaseAPI {
    /**
     * Gets a payment provider from the given handle
     * @summary Get Payment Provider by it\'s handle
     * @param {string} handle
     * @param {string} [orderId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPaymentProvider(handle, orderId, options) {
        return exports.PaymentsApiFp(this.configuration).getPaymentProvider(handle, orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the default, configured payment provider.
     * @summary Get Payment Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPaymentsProvider(options) {
        return exports.PaymentsApiFp(this.configuration).getPaymentsProvider(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of available Payment Types in the system
     * @summary Payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPaymentsTypes(options) {
        return exports.PaymentsApiFp(this.configuration).getPaymentsTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
     * @summary Threed Secure Payment
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    postPayments3dSecure(inlineObject14, options) {
        return exports.PaymentsApiFp(this.configuration).postPayments3dSecure(inlineObject14, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refund a transaction
     * @summary Refund a payment
     * @param {string} transactionId
     * @param {number} [amount] If left blank, the full amount will be refunded
     * @param {string} [notes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    postPaymentsIdRefund(transactionId, amount, notes, options) {
        return exports.PaymentsApiFp(this.configuration).postPaymentsIdRefund(transactionId, amount, notes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Voids a payment in the system.
     * @summary Void a payment
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    postPaymentsTransactionIdVoid(transactionId, options) {
        return exports.PaymentsApiFp(this.configuration).postPaymentsTransactionIdVoid(transactionId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PaymentsApi = PaymentsApi;
