/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CountryCollection } from '../models';
import { CountryResponse } from '../models';
/**
 * CountriesApi - axios parameter creator
 * @export
 */
export declare const CountriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gets a paginated list of all channel
     * @summary Get all countries
     * @param {string} [include] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountries: (include?: string, perPage?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the country resource
     * @param {string} countryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountriesCountryId: (countryId: string, include?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update the country resource
     * @param {string} countryId
     * @param {boolean} [preferred]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCountriesCountryId: (countryId: string, preferred?: boolean, enabled?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * CountriesApi - functional programming interface
 * @export
 */
export declare const CountriesApiFp: (configuration?: Configuration) => {
    /**
     * Gets a paginated list of all channel
     * @summary Get all countries
     * @param {string} [include] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountries(include?: string, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryCollection>>;
    /**
     *
     * @summary Get the country resource
     * @param {string} countryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountriesCountryId(countryId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryResponse>>;
    /**
     *
     * @summary Update the country resource
     * @param {string} countryId
     * @param {boolean} [preferred]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCountriesCountryId(countryId: string, preferred?: boolean, enabled?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryResponse>>;
};
/**
 * CountriesApi - factory interface
 * @export
 */
export declare const CountriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gets a paginated list of all channel
     * @summary Get all countries
     * @param {string} [include] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountries(include?: string, perPage?: number, options?: any): AxiosPromise<CountryCollection>;
    /**
     *
     * @summary Get the country resource
     * @param {string} countryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCountriesCountryId(countryId: string, include?: string, options?: any): AxiosPromise<CountryResponse>;
    /**
     *
     * @summary Update the country resource
     * @param {string} countryId
     * @param {boolean} [preferred]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCountriesCountryId(countryId: string, preferred?: boolean, enabled?: boolean, options?: any): AxiosPromise<CountryResponse>;
};
/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export declare class CountriesApi extends BaseAPI {
    /**
     * Gets a paginated list of all channel
     * @summary Get all countries
     * @param {string} [include] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    getCountries(include?: string, perPage?: number, options?: any): Promise<import("axios").AxiosResponse<CountryCollection, any>>;
    /**
     *
     * @summary Get the country resource
     * @param {string} countryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    getCountriesCountryId(countryId: string, include?: string, options?: any): Promise<import("axios").AxiosResponse<CountryResponse, any>>;
    /**
     *
     * @summary Update the country resource
     * @param {string} countryId
     * @param {boolean} [preferred]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    putCountriesCountryId(countryId: string, preferred?: boolean, enabled?: boolean, options?: any): Promise<import("axios").AxiosResponse<CountryResponse, any>>;
}
