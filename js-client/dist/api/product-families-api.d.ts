/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineObject15 } from '../models';
import { ProductFamilyCollection } from '../models';
import { ProductFamilyResponse } from '../models';
/**
 * ProductFamiliesApi - axios parameter creator
 * @export
 */
export declare const ProductFamiliesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductFamiliesProductFamilyId: (productFamilyId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamilies: (include?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamiliesProductFamilyId: (productFamilyId: string, includes?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductFamilies: (options?: any) => Promise<RequestArgs>;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductFamiliesProductFamilyId: (productFamilyId: string, inlineObject15?: InlineObject15, options?: any) => Promise<RequestArgs>;
};
/**
 * ProductFamiliesApi - functional programming interface
 * @export
 */
export declare const ProductFamiliesApiFp: (configuration?: Configuration) => {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamilies(include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyCollection>>;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>>;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductFamilies(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>>;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject15?: InlineObject15, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>>;
};
/**
 * ProductFamiliesApi - factory interface
 * @export
 */
export declare const ProductFamiliesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamilies(include?: string, options?: any): AxiosPromise<ProductFamilyCollection>;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): AxiosPromise<ProductFamilyResponse>;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductFamilies(options?: any): AxiosPromise<ProductFamilyResponse>;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject15?: InlineObject15, options?: any): AxiosPromise<ProductFamilyResponse>;
};
/**
 * ProductFamiliesApi - object-oriented interface
 * @export
 * @class ProductFamiliesApi
 * @extends {BaseAPI}
 */
export declare class ProductFamiliesApi extends BaseAPI {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    getProductFamilies(include?: string, options?: any): Promise<import("axios").AxiosResponse<ProductFamilyCollection, any>>;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): Promise<import("axios").AxiosResponse<ProductFamilyResponse, any>>;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    postProductFamilies(options?: any): Promise<import("axios").AxiosResponse<ProductFamilyResponse, any>>;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject15?: InlineObject15, options?: any): Promise<import("axios").AxiosResponse<ProductFamilyResponse, any>>;
}
