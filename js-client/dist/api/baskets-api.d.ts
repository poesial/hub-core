/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AddBasketMetaBody } from '../models';
import { BasketCollection } from '../models';
import { BasketLineUpdateBody } from '../models';
import { BasketResponse } from '../models';
import { CreateBasketBody } from '../models';
import { CreateBasketLinesBody } from '../models';
import { InlineResponse200 } from '../models';
import { SaveBasketBody } from '../models';
import { SavedBasketCollection } from '../models';
import { SavedBasketResponse } from '../models';
/**
 * BasketsApi - axios parameter creator
 * @export
 */
export declare const BasketsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketLines: (options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketId: (basketId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdDiscounts: (basketId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBaskets: (options?: any) => Promise<RequestArgs>;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsBasketId: (basketId: string, options?: any) => Promise<RequestArgs>;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsCurrent: (options?: any) => Promise<RequestArgs>;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsSaved: (options?: any) => Promise<RequestArgs>;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketLines: (createBasketLinesBody?: CreateBasketLinesBody, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBaskets: (createBasketBody?: CreateBasketBody, options?: any) => Promise<RequestArgs>;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdClaim: (basketId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdMeta: (basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any) => Promise<RequestArgs>;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdSave: (basketId: string, saveBasketBody?: SaveBasketBody, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsResolve: (saveBasketBody?: SaveBasketBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineId: (basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdAdd: (basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdRemove: (basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketId: (basketId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsSavedBasketId: (basketId: string, saveBasketBody?: SaveBasketBody, options?: any) => Promise<RequestArgs>;
};
/**
 * BasketsApi - functional programming interface
 * @export
 */
export declare const BasketsApiFp: (configuration?: Configuration) => {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketLines(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketId(basketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdDiscounts(basketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBaskets(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketCollection>>;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsBasketId(basketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsCurrent(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsSaved(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedBasketCollection>>;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketLines(createBasketLinesBody?: CreateBasketLinesBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBaskets(createBasketBody?: CreateBasketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdClaim(basketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdMeta(basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdSave(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsResolve(saveBasketBody?: SaveBasketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineId(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdAdd(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdRemove(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketId(basketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>>;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsSavedBasketId(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedBasketResponse>>;
};
/**
 * BasketsApi - factory interface
 * @export
 */
export declare const BasketsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketLines(options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketId(basketId: string, options?: any): AxiosPromise<void>;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdDiscounts(basketId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBaskets(options?: any): AxiosPromise<BasketCollection>;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsBasketId(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsCurrent(options?: any): AxiosPromise<BasketResponse>;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsSaved(options?: any): AxiosPromise<SavedBasketCollection>;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketLines(createBasketLinesBody?: CreateBasketLinesBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBaskets(createBasketBody?: CreateBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdClaim(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdMeta(basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdSave(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsResolve(saveBasketBody?: SaveBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineId(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdAdd(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdRemove(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketId(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsSavedBasketId(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): AxiosPromise<SavedBasketResponse>;
};
/**
 * BasketsApi - object-oriented interface
 * @export
 * @class BasketsApi
 * @extends {BaseAPI}
 */
export declare class BasketsApi extends BaseAPI {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketLines(options?: any): Promise<import("axios").AxiosResponse<InlineResponse200, any>>;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketsBasketId(basketId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketsBasketIdDiscounts(basketId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBaskets(options?: any): Promise<import("axios").AxiosResponse<BasketCollection, any>>;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsBasketId(basketId: string, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsCurrent(options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsSaved(options?: any): Promise<import("axios").AxiosResponse<SavedBasketCollection, any>>;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketLines(createBasketLinesBody?: CreateBasketLinesBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBaskets(createBasketBody?: CreateBasketBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdClaim(basketId: string, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdMeta(basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdSave(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsResolve(saveBasketBody?: SaveBasketBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineId(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineIdAdd(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineIdRemove(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketsBasketId(basketId: string, options?: any): Promise<import("axios").AxiosResponse<BasketResponse, any>>;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketsSavedBasketId(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): Promise<import("axios").AxiosResponse<SavedBasketResponse, any>>;
}
