"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsApi = exports.AssetsApiFactory = exports.AssetsApiFp = exports.AssetsApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * AssetsApi - axios parameter creator
 * @export
 */
exports.AssetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Upload an asset to a model
         * @summary Create Asset
         * @param {string} [mimeType] Required when passing url
         * @param {string} [url] External URL to file to upload, required without file
         * @param {object} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssets: (mimeType, url, file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/assets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            if (mimeType !== undefined) {
                localVarFormParams.append('mime_type', mimeType);
            }
            if (url !== undefined) {
                localVarFormParams.append('url', url);
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
         * @summary Detach an asset from it\'s model
         * @param {string} assetId The hashed asset id
         * @param {string} ownerId The hashed owner id
         * @param {AssetDetachBody} [assetDetachBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetsAssetIdDetachOwnerId: (assetId, ownerId, assetDetachBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'assetId' is not null or undefined
            if (assetId === null || assetId === undefined) {
                throw new base_1.RequiredError('assetId', 'Required parameter assetId was null or undefined when calling postAssetsAssetIdDetachOwnerId.');
            }
            // verify required parameter 'ownerId' is not null or undefined
            if (ownerId === null || ownerId === undefined) {
                throw new base_1.RequiredError('ownerId', 'Required parameter ownerId was null or undefined when calling postAssetsAssetIdDetachOwnerId.');
            }
            const localVarPath = `/assets/{assetId}/detach/{ownerId}`
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)))
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof assetDetachBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(assetDetachBody !== undefined ? assetDetachBody : {}) : (assetDetachBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
         * @summary Simple asset upload
         * @param {object} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetsSimple: (file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new base_1.RequiredError('file', 'Required parameter file was null or undefined when calling postAssetsSimple.');
            }
            const localVarPath = `/assets/simple`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update all assets in the given array of ids.
         * @summary Update Assets
         * @param {UpdateAssetBody} [updateAssetBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssets: (updateAssetBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/assets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof updateAssetBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateAssetBody !== undefined ? updateAssetBody : {}) : (updateAssetBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Reorder assets for a model
         * @summary Reorder Assets
         * @param {ReorderAssetsBody} [reorderAssetsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderAssets: (reorderAssetsBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/assets/reorder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof reorderAssetsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(reorderAssetsBody !== undefined ? reorderAssetsBody : {}) : (reorderAssetsBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AssetsApi - functional programming interface
 * @export
 */
exports.AssetsApiFp = function (configuration) {
    return {
        /**
         * Upload an asset to a model
         * @summary Create Asset
         * @param {string} [mimeType] Required when passing url
         * @param {string} [url] External URL to file to upload, required without file
         * @param {object} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssets(mimeType, url, file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssetsApiAxiosParamCreator(configuration).postAssets(mimeType, url, file, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
         * @summary Detach an asset from it\'s model
         * @param {string} assetId The hashed asset id
         * @param {string} ownerId The hashed owner id
         * @param {AssetDetachBody} [assetDetachBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetsAssetIdDetachOwnerId(assetId, ownerId, assetDetachBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssetsApiAxiosParamCreator(configuration).postAssetsAssetIdDetachOwnerId(assetId, ownerId, assetDetachBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
         * @summary Simple asset upload
         * @param {object} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetsSimple(file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssetsApiAxiosParamCreator(configuration).postAssetsSimple(file, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update all assets in the given array of ids.
         * @summary Update Assets
         * @param {UpdateAssetBody} [updateAssetBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssets(updateAssetBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssetsApiAxiosParamCreator(configuration).putAssets(updateAssetBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Reorder assets for a model
         * @summary Reorder Assets
         * @param {ReorderAssetsBody} [reorderAssetsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderAssets(reorderAssetsBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssetsApiAxiosParamCreator(configuration).reorderAssets(reorderAssetsBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * AssetsApi - factory interface
 * @export
 */
exports.AssetsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Upload an asset to a model
         * @summary Create Asset
         * @param {string} [mimeType] Required when passing url
         * @param {string} [url] External URL to file to upload, required without file
         * @param {object} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssets(mimeType, url, file, options) {
            return exports.AssetsApiFp(configuration).postAssets(mimeType, url, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
         * @summary Detach an asset from it\'s model
         * @param {string} assetId The hashed asset id
         * @param {string} ownerId The hashed owner id
         * @param {AssetDetachBody} [assetDetachBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetsAssetIdDetachOwnerId(assetId, ownerId, assetDetachBody, options) {
            return exports.AssetsApiFp(configuration).postAssetsAssetIdDetachOwnerId(assetId, ownerId, assetDetachBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
         * @summary Simple asset upload
         * @param {object} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetsSimple(file, options) {
            return exports.AssetsApiFp(configuration).postAssetsSimple(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Update all assets in the given array of ids.
         * @summary Update Assets
         * @param {UpdateAssetBody} [updateAssetBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssets(updateAssetBody, options) {
            return exports.AssetsApiFp(configuration).putAssets(updateAssetBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Reorder assets for a model
         * @summary Reorder Assets
         * @param {ReorderAssetsBody} [reorderAssetsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderAssets(reorderAssetsBody, options) {
            return exports.AssetsApiFp(configuration).reorderAssets(reorderAssetsBody, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
class AssetsApi extends base_1.BaseAPI {
    /**
     * Upload an asset to a model
     * @summary Create Asset
     * @param {string} [mimeType] Required when passing url
     * @param {string} [url] External URL to file to upload, required without file
     * @param {object} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    postAssets(mimeType, url, file, options) {
        return exports.AssetsApiFp(this.configuration).postAssets(mimeType, url, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
     * @summary Detach an asset from it\'s model
     * @param {string} assetId The hashed asset id
     * @param {string} ownerId The hashed owner id
     * @param {AssetDetachBody} [assetDetachBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    postAssetsAssetIdDetachOwnerId(assetId, ownerId, assetDetachBody, options) {
        return exports.AssetsApiFp(this.configuration).postAssetsAssetIdDetachOwnerId(assetId, ownerId, assetDetachBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
     * @summary Simple asset upload
     * @param {object} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    postAssetsSimple(file, options) {
        return exports.AssetsApiFp(this.configuration).postAssetsSimple(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update all assets in the given array of ids.
     * @summary Update Assets
     * @param {UpdateAssetBody} [updateAssetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    putAssets(updateAssetBody, options) {
        return exports.AssetsApiFp(this.configuration).putAssets(updateAssetBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reorder assets for a model
     * @summary Reorder Assets
     * @param {ReorderAssetsBody} [reorderAssetsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    reorderAssets(reorderAssetsBody, options) {
        return exports.AssetsApiFp(this.configuration).reorderAssets(reorderAssetsBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AssetsApi = AssetsApi;
