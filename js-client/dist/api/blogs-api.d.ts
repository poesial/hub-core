/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineObject17 } from '../models';
import { InlineObject18 } from '../models';
import { InlineObject19 } from '../models';
import { InlineObject20 } from '../models';
import { InlineObject21 } from '../models';
import { InlineObject22 } from '../models';
import { InlineObject23 } from '../models';
import { InlineObject24 } from '../models';
import { InlineObject25 } from '../models';
import { BlogCollection } from '../models';
import { BlogRecommendationCollection } from '../models';
import { BlogResponse } from '../models';
import { BlogUpdateBody } from '../models';
import { ShippingShippingMethodIdName } from '../models';
/**
 * BlogsApi - axios parameter creator
 * @export
 */
export declare const BlogsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Detaches a category from a blog. Does not delete the category.
     * @summary Detach category
     * @param {string} blogId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCategoriesCategory: (blogId: string, categoryId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Detaches a collection from a blog. Does not delete the collection.
     * @summary Detach collection
     * @param {string} blogId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCollectionsDetach: (blogId: string, collectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Detaches customer groups from a blog
     * @summary Detach customer groups
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCustomerGroups: (blogId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a blog by it\'s ID  > This will only soft delete the blog. It will then be available to restore at a later time.
     * @summary Delete Blog
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogId: (blogId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes blog associations
     * @summary
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogIdAssociations: (blogId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Gets a paginated list of blogs.
     * @summary Get Blogs
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogs: (include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a blog by it\'s given ID
     * @summary Get Blog
     * @param {string} blogId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsBlogId: (blogId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a draft for a blog.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsBlogIdDrafts: (blogId: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint will return recommended blogs based on a basket.  Using blog associations, the API will find blogs in the basket and display any relations that have been defined.
     * @summary Get recommended blogs
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsRecommended: (basketId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog redirect
     * @param {string} blogId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogRedirects: (blogId: string, inlineObject19?: InlineObject19, options?: any) => Promise<RequestArgs>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog route
     * @param {string} blogId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogUrls: (blogId: string, inlineObject18?: InlineObject18, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Blog
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogs: (name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a draft blog from an existing blog.
     * @summary Create Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsIdDrafts: (blogId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Publish a draft from a Blog
     * @summary Publish Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsIdPublish: (blogId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Updates blog associations
     * @summary Update blog associations
     * @param {string} blogId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogAssociations: (blogId: string, inlineObject24?: InlineObject24, options?: any) => Promise<RequestArgs>;
    /**
     * Allows you to sync up the attributes which are directly associated to this blog.
     * @summary Update Blog attributes
     * @param {string} blogId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogAttributes: (blogId: string, inlineObject20?: InlineObject20, options?: any) => Promise<RequestArgs>;
    /**
     * Sync blog categories
     * @summary Update Blog categories
     * @param {string} blogId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogCategories: (blogId: string, inlineObject22?: InlineObject22, options?: any) => Promise<RequestArgs>;
    /**
     * Sync blog Channels
     * @summary Update Blog channels
     * @param {string} blogId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogChannels: (blogId: string, inlineObject23?: InlineObject23, options?: any) => Promise<RequestArgs>;
    /**
     * Update a blogs customer groups
     * @summary Update customer groups
     * @param {string} blogId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogCustomerGroups: (blogId: string, inlineObject25?: InlineObject25, options?: any) => Promise<RequestArgs>;
    /**
     * Update a blogs collections.
     * @summary Update Blog collections
     * @param {string} blogId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogIdCollections: (blogId: string, inlineObject21?: InlineObject21, options?: any) => Promise<RequestArgs>;
    /**
     * Duplicates a blog, requires you to specify new slugs and SKU\'s.  > Duplicated blog will not immediately be active.
     * @summary Duplicate Blog
     * @param {string} blogId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogIdDuplicate: (blogId: string, inlineObject17?: InlineObject17, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a blog by it\'s ID
     * @summary Update Blog
     * @param {string} blogId
     * @param {BlogUpdateBody} [blogUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBlogsBlogId: (blogId: string, blogUpdateBody?: any, options?: any) => Promise<RequestArgs>;
};
/**
 * BlogsApi - functional programming interface
 * @export
 */
export declare const BlogsApiFp: (configuration?: Configuration) => {
    /**
     * Detaches a category from a blog. Does not delete the category.
     * @summary Detach category
     * @param {string} blogId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCategoriesCategory(blogId: string, categoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Detaches a collection from a blog. Does not delete the collection.
     * @summary Detach collection
     * @param {string} blogId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCollectionsDetach(blogId: string, collectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Detaches customer groups from a blog
     * @summary Detach customer groups
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCustomerGroups(blogId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a blog by it\'s ID  > This will only soft delete the blog. It will then be available to restore at a later time.
     * @summary Delete Blog
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogId(blogId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Removes blog associations
     * @summary
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogIdAssociations(blogId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a paginated list of blogs.
     * @summary Get Blogs
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogs(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogCollection>>;
    /**
     * Returns a blog by it\'s given ID
     * @summary Get Blog
     * @param {string} blogId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsBlogId(blogId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Create a draft for a blog.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsBlogIdDrafts(blogId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * This endpoint will return recommended blogs based on a basket.  Using blog associations, the API will find blogs in the basket and display any relations that have been defined.
     * @summary Get recommended blogs
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsRecommended(basketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogRecommendationCollection>>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog redirect
     * @param {string} blogId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogRedirects(blogId: string, inlineObject19?: InlineObject19, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog route
     * @param {string} blogId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogUrls(blogId: string, inlineObject18?: InlineObject18, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     *
     * @summary Create Blog
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogs(name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Create a draft blog from an existing blog.
     * @summary Create Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsIdDrafts(blogId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Publish a draft from a Blog
     * @summary Publish Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsIdPublish(blogId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Updates blog associations
     * @summary Update blog associations
     * @param {string} blogId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogAssociations(blogId: string, inlineObject24?: InlineObject24, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Allows you to sync up the attributes which are directly associated to this blog.
     * @summary Update Blog attributes
     * @param {string} blogId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogAttributes(blogId: string, inlineObject20?: InlineObject20, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Sync blog categories
     * @summary Update Blog categories
     * @param {string} blogId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogCategories(blogId: string, inlineObject22?: InlineObject22, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Sync blog Channels
     * @summary Update Blog channels
     * @param {string} blogId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogChannels(blogId: string, inlineObject23?: InlineObject23, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Update a blogs customer groups
     * @summary Update customer groups
     * @param {string} blogId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogCustomerGroups(blogId: string, inlineObject25?: InlineObject25, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Update a blogs collections.
     * @summary Update Blog collections
     * @param {string} blogId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogIdCollections(blogId: string, inlineObject21?: InlineObject21, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Duplicates a blog, requires you to specify new slugs and SKU\'s.  > Duplicated blog will not immediately be active.
     * @summary Duplicate Blog
     * @param {string} blogId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogIdDuplicate(blogId: string, inlineObject17?: InlineObject17, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
    /**
     * Updates a blog by it\'s ID
     * @summary Update Blog
     * @param {string} blogId
     * @param {BlogUpdateBody} [blogUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBlogsBlogId(blogId: string, blogUpdateBody?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>>;
};
/**
 * BlogsApi - factory interface
 * @export
 */
export declare const BlogsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Detaches a category from a blog. Does not delete the category.
     * @summary Detach category
     * @param {string} blogId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCategoriesCategory(blogId: string, categoryId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches a collection from a blog. Does not delete the collection.
     * @summary Detach collection
     * @param {string} blogId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCollectionsDetach(blogId: string, collectionId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches customer groups from a blog
     * @summary Detach customer groups
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogCustomerGroups(blogId: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes a blog by it\'s ID  > This will only soft delete the blog. It will then be available to restore at a later time.
     * @summary Delete Blog
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogId(blogId: string, options?: any): AxiosPromise<void>;
    /**
     * Removes blog associations
     * @summary
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogsBlogIdAssociations(blogId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a paginated list of blogs.
     * @summary Get Blogs
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogs(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): AxiosPromise<BlogCollection>;
    /**
     * Returns a blog by it\'s given ID
     * @summary Get Blog
     * @param {string} blogId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsBlogId(blogId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Create a draft for a blog.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsBlogIdDrafts(blogId: string, options?: any): AxiosPromise<BlogResponse>;
    /**
     * This endpoint will return recommended blogs based on a basket.  Using blog associations, the API will find blogs in the basket and display any relations that have been defined.
     * @summary Get recommended blogs
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogsRecommended(basketId: string, options?: any): AxiosPromise<BlogRecommendationCollection>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog redirect
     * @param {string} blogId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogRedirects(blogId: string, inlineObject19?: InlineObject19, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog route
     * @param {string} blogId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogUrls(blogId: string, inlineObject18?: InlineObject18, options?: any): AxiosPromise<BlogResponse>;
    /**
     *
     * @summary Create Blog
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogs(name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Create a draft blog from an existing blog.
     * @summary Create Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsIdDrafts(blogId: string, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Publish a draft from a Blog
     * @summary Publish Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsIdPublish(blogId: string, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Updates blog associations
     * @summary Update blog associations
     * @param {string} blogId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogAssociations(blogId: string, inlineObject24?: InlineObject24, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Allows you to sync up the attributes which are directly associated to this blog.
     * @summary Update Blog attributes
     * @param {string} blogId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogAttributes(blogId: string, inlineObject20?: InlineObject20, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Sync blog categories
     * @summary Update Blog categories
     * @param {string} blogId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogCategories(blogId: string, inlineObject22?: InlineObject22, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Sync blog Channels
     * @summary Update Blog channels
     * @param {string} blogId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogChannels(blogId: string, inlineObject23?: InlineObject23, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Update a blogs customer groups
     * @summary Update customer groups
     * @param {string} blogId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogCustomerGroups(blogId: string, inlineObject25?: InlineObject25, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Update a blogs collections.
     * @summary Update Blog collections
     * @param {string} blogId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogIdCollections(blogId: string, inlineObject21?: InlineObject21, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Duplicates a blog, requires you to specify new slugs and SKU\'s.  > Duplicated blog will not immediately be active.
     * @summary Duplicate Blog
     * @param {string} blogId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogsBlogIdDuplicate(blogId: string, inlineObject17?: InlineObject17, options?: any): AxiosPromise<BlogResponse>;
    /**
     * Updates a blog by it\'s ID
     * @summary Update Blog
     * @param {string} blogId
     * @param {BlogUpdateBody} [blogUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBlogsBlogId(blogId: string, blogUpdateBody?: any, options?: any): AxiosPromise<BlogResponse>;
};
/**
 * BlogsApi - object-oriented interface
 * @export
 * @class BlogsApi
 * @extends {BaseAPI}
 */
export declare class BlogsApi extends BaseAPI {
    /**
     * Detaches a category from a blog. Does not delete the category.
     * @summary Detach category
     * @param {string} blogId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    deleteBlogsBlogCategoriesCategory(blogId: string, categoryId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Detaches a collection from a blog. Does not delete the collection.
     * @summary Detach collection
     * @param {string} blogId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    deleteBlogsBlogCollectionsDetach(blogId: string, collectionId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Detaches customer groups from a blog
     * @summary Detach customer groups
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    deleteBlogsBlogCustomerGroups(blogId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes a blog by it\'s ID  > This will only soft delete the blog. It will then be available to restore at a later time.
     * @summary Delete Blog
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    deleteBlogsBlogId(blogId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Removes blog associations
     * @summary
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    deleteBlogsBlogIdAssociations(blogId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a paginated list of blogs.
     * @summary Get Blogs
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    getBlogs(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Returns a blog by it\'s given ID
     * @summary Get Blog
     * @param {string} blogId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    getBlogsBlogId(blogId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Create a draft for a blog.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    getBlogsBlogIdDrafts(blogId: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This endpoint will return recommended blogs based on a basket.  Using blog associations, the API will find blogs in the basket and display any relations that have been defined.
     * @summary Get recommended blogs
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    getBlogsRecommended(basketId: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog redirect
     * @param {string} blogId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogRedirects(blogId: string, inlineObject19?: InlineObject19, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Creates and syncs a new blog route.
     * @summary Create Blog route
     * @param {string} blogId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogUrls(blogId: string, inlineObject18?: InlineObject18, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Create Blog
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogs(name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Create a draft blog from an existing blog.
     * @summary Create Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsIdDrafts(blogId: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Publish a draft from a Blog
     * @summary Publish Draft
     * @param {string} blogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsIdPublish(blogId: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Updates blog associations
     * @summary Update blog associations
     * @param {string} blogId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsBlogAssociations(blogId: string, inlineObject24?: InlineObject24, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Allows you to sync up the attributes which are directly associated to this blog.
     * @summary Update Blog attributes
     * @param {string} blogId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsBlogAttributes(blogId: string, inlineObject20?: InlineObject20, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Sync blog categories
     * @summary Update Blog categories
     * @param {string} blogId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsBlogCategories(blogId: string, inlineObject22?: InlineObject22, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Sync blog Channels
     * @summary Update Blog channels
     * @param {string} blogId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsBlogChannels(blogId: string, inlineObject23?: InlineObject23, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update a blogs customer groups
     * @summary Update customer groups
     * @param {string} blogId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsBlogCustomerGroups(blogId: string, inlineObject25?: InlineObject25, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update a blogs collections.
     * @summary Update Blog collections
     * @param {string} blogId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsBlogIdCollections(blogId: string, inlineObject21?: InlineObject21, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Duplicates a blog, requires you to specify new slugs and SKU\'s.  > Duplicated blog will not immediately be active.
     * @summary Duplicate Blog
     * @param {string} blogId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    postBlogsBlogIdDuplicate(blogId: string, inlineObject17?: InlineObject17, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Updates a blog by it\'s ID
     * @summary Update Blog
     * @param {string} blogId
     * @param {BlogUpdateBody} [blogUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    putBlogsBlogId(blogId: string, blogUpdateBody?: BlogUpdateBody, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
}
