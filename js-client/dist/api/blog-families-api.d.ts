/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineObject15 } from '../models';
import { BlogFamilyCollection } from '../models';
import { BlogFamilyResponse } from '../models';
/**
 * BlogFamiliesApi - axios parameter creator
 * @export
 */
export declare const BlogFamiliesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Sends a request to delete a blog family
     * @summary Delete blog family
     * @param {string} blogFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogFamiliesBlogFamilyId: (blogFamilyId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of all blog families.
     * @summary Get blog families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogFamilies: (include?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a single blog family based on ID.
     * @summary Get a blog family
     * @param {string} blogFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogFamiliesBlogFamilyId: (blogFamilyId: string, includes?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new blog family.
     * @summary Create blog family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogFamilies: (options?: any) => Promise<RequestArgs>;
    /**
     * Update a blog family
     * @summary Update blog family
     * @param {string} blogFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBlogFamiliesBlogFamilyId: (blogFamilyId: string, inlineObject15?: InlineObject15, options?: any) => Promise<RequestArgs>;
};
/**
 * BlogFamiliesApi - functional programming interface
 * @export
 */
export declare const BlogFamiliesApiFp: (configuration?: Configuration) => {
    /**
     * Sends a request to delete a blog family
     * @summary Delete blog family
     * @param {string} blogFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogFamiliesBlogFamilyId(blogFamilyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a paginated list of all blog families.
     * @summary Get blog families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogFamilies(include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogFamilyCollection>>;
    /**
     * Returns a single blog family based on ID.
     * @summary Get a blog family
     * @param {string} blogFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogFamiliesBlogFamilyId(blogFamilyId: string, includes?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogFamilyResponse>>;
    /**
     * Create a new blog family.
     * @summary Create blog family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogFamilies(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogFamilyResponse>>;
    /**
     * Update a blog family
     * @summary Update blog family
     * @param {string} blogFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBlogFamiliesBlogFamilyId(blogFamilyId: string, inlineObject15?: InlineObject15, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogFamilyResponse>>;
};
/**
 * BlogFamiliesApi - factory interface
 * @export
 */
export declare const BlogFamiliesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Sends a request to delete a blog family
     * @summary Delete blog family
     * @param {string} blogFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogFamiliesBlogFamilyId(blogFamilyId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of all blog families.
     * @summary Get blog families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogFamilies(include?: string, options?: any): AxiosPromise<BlogFamilyCollection>;
    /**
     * Returns a single blog family based on ID.
     * @summary Get a blog family
     * @param {string} blogFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogFamiliesBlogFamilyId(blogFamilyId: string, includes?: string, options?: any): AxiosPromise<BlogFamilyResponse>;
    /**
     * Create a new blog family.
     * @summary Create blog family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBlogFamilies(options?: any): AxiosPromise<BlogFamilyResponse>;
    /**
     * Update a blog family
     * @summary Update blog family
     * @param {string} blogFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBlogFamiliesBlogFamilyId(blogFamilyId: string, inlineObject15?: InlineObject15, options?: any): AxiosPromise<BlogFamilyResponse>;
};
/**
 * BlogFamiliesApi - object-oriented interface
 * @export
 * @class BlogFamiliesApi
 * @extends {BaseAPI}
 */
export declare class BlogFamiliesApi extends BaseAPI {
    /**
     * Sends a request to delete a blog family
     * @summary Delete blog family
     * @param {string} blogFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    deleteBlogFamiliesBlogFamilyId(blogFamilyId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a paginated list of all blog families.
     * @summary Get blog families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    getBlogFamilies(include?: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Returns a single blog family based on ID.
     * @summary Get a blog family
     * @param {string} blogFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    getBlogFamiliesBlogFamilyId(blogFamilyId: string, includes?: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Create a new blog family.
     * @summary Create blog family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    postBlogFamilies(options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Update a blog family
     * @summary Update blog family
     * @param {string} blogFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    putBlogFamiliesBlogFamilyId(blogFamilyId: string, inlineObject15?: InlineObject15, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
}
