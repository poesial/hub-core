/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineObject17 } from '../models';
import { InlineObject18 } from '../models';
import { InlineObject19 } from '../models';
import { InlineObject20 } from '../models';
import { InlineObject21 } from '../models';
import { InlineObject22 } from '../models';
import { InlineObject23 } from '../models';
import { InlineObject24 } from '../models';
import { InlineObject25 } from '../models';
import { ProductCollection } from '../models';
import { ProductRecommendationCollection } from '../models';
import { ProductResponse } from '../models';
import { ProductUpdateBody } from '../models';
import { ShippingShippingMethodIdName } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCategoriesCategory: (productId: string, categoryId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCollectionsDetach: (productId: string, collectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCustomerGroups: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductId: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Removes product associations
     * @summary
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductIdAssociations: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts: (include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductId: (productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductIdDrafts: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsRecommended: (basketId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductRedirects: (productId: string, inlineObject19?: InlineObject19, options?: any) => Promise<RequestArgs>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductUrls: (productId: string, inlineObject18?: InlineObject18, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Product
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProducts: (name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdDrafts: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdPublish: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAssociations: (productId: string, inlineObject24?: InlineObject24, options?: any) => Promise<RequestArgs>;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAttributes: (productId: string, inlineObject20?: InlineObject20, options?: any) => Promise<RequestArgs>;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCategories: (productId: string, inlineObject22?: InlineObject22, options?: any) => Promise<RequestArgs>;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductChannels: (productId: string, inlineObject23?: InlineObject23, options?: any) => Promise<RequestArgs>;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCustomerGroups: (productId: string, inlineObject25?: InlineObject25, options?: any) => Promise<RequestArgs>;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdCollections: (productId: string, inlineObject21?: InlineObject21, options?: any) => Promise<RequestArgs>;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdDuplicate: (productId: string, inlineObject17?: InlineObject17, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsProductId: (productId: string, productUpdateBody?: ProductUpdateBody, options?: any) => Promise<RequestArgs>;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCategoriesCategory(productId: string, categoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCollectionsDetach(productId: string, collectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCustomerGroups(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductId(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Removes product associations
     * @summary
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductIdAssociations(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCollection>>;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductId(productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductIdDrafts(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsRecommended(basketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductRecommendationCollection>>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductRedirects(productId: string, inlineObject19?: InlineObject19, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductUrls(productId: string, inlineObject18?: InlineObject18, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     *
     * @summary Create Product
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProducts(name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdDrafts(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdPublish(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAssociations(productId: string, inlineObject24?: InlineObject24, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAttributes(productId: string, inlineObject20?: InlineObject20, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCategories(productId: string, inlineObject22?: InlineObject22, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductChannels(productId: string, inlineObject23?: InlineObject23, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCustomerGroups(productId: string, inlineObject25?: InlineObject25, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdCollections(productId: string, inlineObject21?: InlineObject21, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdDuplicate(productId: string, inlineObject17?: InlineObject17, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsProductId(productId: string, productUpdateBody?: ProductUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCategoriesCategory(productId: string, categoryId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCollectionsDetach(productId: string, collectionId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCustomerGroups(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductId(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Removes product associations
     * @summary
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductIdAssociations(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): AxiosPromise<ProductCollection>;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductId(productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductIdDrafts(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsRecommended(basketId: string, options?: any): AxiosPromise<ProductRecommendationCollection>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductRedirects(productId: string, inlineObject19?: InlineObject19, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductUrls(productId: string, inlineObject18?: InlineObject18, options?: any): AxiosPromise<ProductResponse>;
    /**
     *
     * @summary Create Product
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProducts(name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdDrafts(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdPublish(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAssociations(productId: string, inlineObject24?: InlineObject24, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAttributes(productId: string, inlineObject20?: InlineObject20, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCategories(productId: string, inlineObject22?: InlineObject22, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductChannels(productId: string, inlineObject23?: InlineObject23, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCustomerGroups(productId: string, inlineObject25?: InlineObject25, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdCollections(productId: string, inlineObject21?: InlineObject21, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdDuplicate(productId: string, inlineObject17?: InlineObject17, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsProductId(productId: string, productUpdateBody?: ProductUpdateBody, options?: any): AxiosPromise<ProductResponse>;
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductCategoriesCategory(productId: string, categoryId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductCollectionsDetach(productId: string, collectionId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductCustomerGroups(productId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductId(productId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Removes product associations
     * @summary
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductIdAssociations(productId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProducts(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ProductCollection, any>>;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductsProductId(productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductsProductIdDrafts(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductsRecommended(basketId: string, options?: any): Promise<import("axios").AxiosResponse<ProductRecommendationCollection, any>>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductRedirects(productId: string, inlineObject19?: InlineObject19, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductUrls(productId: string, inlineObject18?: InlineObject18, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     *
     * @summary Create Product
     * @param {ShippingShippingMethodIdName} name
     * @param {string} url
     * @param {number} stock
     * @param {string} familyId
     * @param {number} price
     * @param {string} sku
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProducts(name: ShippingShippingMethodIdName, url: string, stock: number, familyId: string, price: number, sku: string, include?: string, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsIdDrafts(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsIdPublish(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductAssociations(productId: string, inlineObject24?: InlineObject24, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductAttributes(productId: string, inlineObject20?: InlineObject20, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductCategories(productId: string, inlineObject22?: InlineObject22, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductChannels(productId: string, inlineObject23?: InlineObject23, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductCustomerGroups(productId: string, inlineObject25?: InlineObject25, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductIdCollections(productId: string, inlineObject21?: InlineObject21, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductIdDuplicate(productId: string, inlineObject17?: InlineObject17, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    putProductsProductId(productId: string, productUpdateBody?: ProductUpdateBody, options?: any): Promise<import("axios").AxiosResponse<ProductResponse, any>>;
}
