"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoriesApi = exports.CategoriesApiFactory = exports.CategoriesApiFp = exports.CategoriesApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
exports.CategoriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a paginated resource of categories
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a single category from a given ID
         * @summary Return a single category
         * @param {string} categoryId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesCategoryId: (categoryId, includes, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling getCategoriesCategoryId.');
            }
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns categories by a given parent ID.
         * @summary Get categories by parent id
         * @param {string} parentId If omitted will return top level catgories
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesParentParentId: (parentId, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new base_1.RequiredError('parentId', 'Required parameter parentId was null or undefined when calling getCategoriesParentParentId.');
            }
            const localVarPath = `/categories/parent/{parentId}`
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attaches channels to a catagory
         * @summary Attach channels to a category
         * @param {string} categoryId
         * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdChannels: (categoryId, attachCategoryChannelsBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling postCategoriesCategoryIdChannels.');
            }
            const localVarPath = `/categories/{categoryId}/channels`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof attachCategoryChannelsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(attachCategoryChannelsBody !== undefined ? attachCategoryChannelsBody : {}) : (attachCategoryChannelsBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attaches customer groups to a category resource.
         * @summary Attach customer groups to a category
         * @param {string} categoryId
         * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdCustomerGroups: (categoryId, attachCategoryCustomerGroupsBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling postCategoriesCategoryIdCustomerGroups.');
            }
            const localVarPath = `/categories/{categoryId}/customer-groups`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof attachCategoryCustomerGroupsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(attachCategoryCustomerGroupsBody !== undefined ? attachCategoryCustomerGroupsBody : {}) : (attachCategoryCustomerGroupsBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create or return the current category draft resource.
         * @summary Create or retrieve the current category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdDrafts: (categoryId, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling postCategoriesCategoryIdDrafts.');
            }
            const localVarPath = `/categories/{categoryId}/drafts`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attaches layouts to a category resource
         * @summary Update a category layout
         * @param {string} categoryId
         * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryLayouts: (categoryId, categoryAttachLayoutBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling postCategoriesCategoryLayouts.');
            }
            const localVarPath = `/categories/{categoryId}/layouts`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof categoryAttachLayoutBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(categoryAttachLayoutBody !== undefined ? categoryAttachLayoutBody : {}) : (categoryAttachLayoutBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attaches routes to a category resource.
         * @summary Update a category\'s routes
         * @param {string} categoryId
         * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryRoutes: (categoryId, attachCategoryRoutesBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling postCategoriesCategoryRoutes.');
            }
            const localVarPath = `/categories/{categoryId}/routes`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof attachCategoryRoutesBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(attachCategoryRoutesBody !== undefined ? attachCategoryRoutesBody : {}) : (attachCategoryRoutesBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Reorder a category
         * @param {ReorderCategoryBody} [reorderCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesReorder: (reorderCategoryBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/categories/reorder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof reorderCategoryBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(reorderCategoryBody !== undefined ? reorderCategoryBody : {}) : (reorderCategoryBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publishes a category draft
         * @summary Publishes a category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCategoryDraft: (categoryId, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling publishCategoryDraft.');
            }
            const localVarPath = `/categories/{categoryId}/publish`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a category using a given ID.
         * @summary Update a category
         * @param {string} categoryId
         * @param {CreateCategoryBody} [createCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryId: (categoryId, createCategoryBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling putCategoriesCategoryId.');
            }
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof createCategoryBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createCategoryBody !== undefined ? createCategoryBody : {}) : (createCategoryBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attaches products to a category resource.
         * @summary Attach products
         * @param {string} categoryId
         * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryIdProducts: (categoryId, attachCategoryProductsBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling putCategoriesCategoryIdProducts.');
            }
            const localVarPath = `/categories/{categoryId}/products`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof attachCategoryProductsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(attachCategoryProductsBody !== undefined ? attachCategoryProductsBody : {}) : (attachCategoryProductsBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
exports.CategoriesApiFp = function (configuration) {
    return {
        /**
         * Returns a paginated resource of categories
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).getCategories(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a single category from a given ID
         * @summary Return a single category
         * @param {string} categoryId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesCategoryId(categoryId, includes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).getCategoriesCategoryId(categoryId, includes, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns categories by a given parent ID.
         * @summary Get categories by parent id
         * @param {string} parentId If omitted will return top level catgories
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesParentParentId(parentId, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).getCategoriesParentParentId(parentId, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Attaches channels to a catagory
         * @summary Attach channels to a category
         * @param {string} categoryId
         * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Attaches customer groups to a category resource.
         * @summary Attach customer groups to a category
         * @param {string} categoryId
         * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create or return the current category draft resource.
         * @summary Create or retrieve the current category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdDrafts(categoryId, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryIdDrafts(categoryId, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Attaches layouts to a category resource
         * @summary Update a category layout
         * @param {string} categoryId
         * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Attaches routes to a category resource.
         * @summary Update a category\'s routes
         * @param {string} categoryId
         * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Reorder a category
         * @param {ReorderCategoryBody} [reorderCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesReorder(reorderCategoryBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).postCategoriesReorder(reorderCategoryBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Publishes a category draft
         * @summary Publishes a category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCategoryDraft(categoryId, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).publishCategoryDraft(categoryId, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update a category using a given ID.
         * @summary Update a category
         * @param {string} categoryId
         * @param {CreateCategoryBody} [createCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryId(categoryId, createCategoryBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).putCategoriesCategoryId(categoryId, createCategoryBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Attaches products to a category resource.
         * @summary Attach products
         * @param {string} categoryId
         * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoriesApiAxiosParamCreator(configuration).putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CategoriesApi - factory interface
 * @export
 */
exports.CategoriesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns a paginated resource of categories
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options) {
            return exports.CategoriesApiFp(configuration).getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single category from a given ID
         * @summary Return a single category
         * @param {string} categoryId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesCategoryId(categoryId, includes, options) {
            return exports.CategoriesApiFp(configuration).getCategoriesCategoryId(categoryId, includes, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns categories by a given parent ID.
         * @summary Get categories by parent id
         * @param {string} parentId If omitted will return top level catgories
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesParentParentId(parentId, include, options) {
            return exports.CategoriesApiFp(configuration).getCategoriesParentParentId(parentId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches channels to a catagory
         * @summary Attach channels to a category
         * @param {string} categoryId
         * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options) {
            return exports.CategoriesApiFp(configuration).postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches customer groups to a category resource.
         * @summary Attach customer groups to a category
         * @param {string} categoryId
         * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options) {
            return exports.CategoriesApiFp(configuration).postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or return the current category draft resource.
         * @summary Create or retrieve the current category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdDrafts(categoryId, include, options) {
            return exports.CategoriesApiFp(configuration).postCategoriesCategoryIdDrafts(categoryId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches layouts to a category resource
         * @summary Update a category layout
         * @param {string} categoryId
         * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options) {
            return exports.CategoriesApiFp(configuration).postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches routes to a category resource.
         * @summary Update a category\'s routes
         * @param {string} categoryId
         * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options) {
            return exports.CategoriesApiFp(configuration).postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Reorder a category
         * @param {ReorderCategoryBody} [reorderCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesReorder(reorderCategoryBody, options) {
            return exports.CategoriesApiFp(configuration).postCategoriesReorder(reorderCategoryBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a category draft
         * @summary Publishes a category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCategoryDraft(categoryId, include, options) {
            return exports.CategoriesApiFp(configuration).publishCategoryDraft(categoryId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a category using a given ID.
         * @summary Update a category
         * @param {string} categoryId
         * @param {CreateCategoryBody} [createCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryId(categoryId, createCategoryBody, options) {
            return exports.CategoriesApiFp(configuration).putCategoriesCategoryId(categoryId, createCategoryBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches products to a category resource.
         * @summary Attach products
         * @param {string} categoryId
         * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options) {
            return exports.CategoriesApiFp(configuration).putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
class CategoriesApi extends base_1.BaseAPI {
    /**
     * Returns a paginated resource of categories
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategories(options) {
        return exports.CategoriesApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a single category from a given ID
     * @summary Return a single category
     * @param {string} categoryId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategoriesCategoryId(categoryId, includes, options) {
        return exports.CategoriesApiFp(this.configuration).getCategoriesCategoryId(categoryId, includes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns categories by a given parent ID.
     * @summary Get categories by parent id
     * @param {string} parentId If omitted will return top level catgories
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategoriesParentParentId(parentId, include, options) {
        return exports.CategoriesApiFp(this.configuration).getCategoriesParentParentId(parentId, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attaches channels to a catagory
     * @summary Attach channels to a category
     * @param {string} categoryId
     * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options) {
        return exports.CategoriesApiFp(this.configuration).postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attaches customer groups to a category resource.
     * @summary Attach customer groups to a category
     * @param {string} categoryId
     * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options) {
        return exports.CategoriesApiFp(this.configuration).postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create or return the current category draft resource.
     * @summary Create or retrieve the current category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryIdDrafts(categoryId, include, options) {
        return exports.CategoriesApiFp(this.configuration).postCategoriesCategoryIdDrafts(categoryId, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attaches layouts to a category resource
     * @summary Update a category layout
     * @param {string} categoryId
     * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options) {
        return exports.CategoriesApiFp(this.configuration).postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attaches routes to a category resource.
     * @summary Update a category\'s routes
     * @param {string} categoryId
     * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options) {
        return exports.CategoriesApiFp(this.configuration).postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Reorder a category
     * @param {ReorderCategoryBody} [reorderCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesReorder(reorderCategoryBody, options) {
        return exports.CategoriesApiFp(this.configuration).postCategoriesReorder(reorderCategoryBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publishes a category draft
     * @summary Publishes a category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    publishCategoryDraft(categoryId, include, options) {
        return exports.CategoriesApiFp(this.configuration).publishCategoryDraft(categoryId, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a category using a given ID.
     * @summary Update a category
     * @param {string} categoryId
     * @param {CreateCategoryBody} [createCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    putCategoriesCategoryId(categoryId, createCategoryBody, options) {
        return exports.CategoriesApiFp(this.configuration).putCategoriesCategoryId(categoryId, createCategoryBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attaches products to a category resource.
     * @summary Attach products
     * @param {string} categoryId
     * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options) {
        return exports.CategoriesApiFp(this.configuration).putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CategoriesApi = CategoriesApi;
