/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CustomerGroupCollection } from '../models';
import { CustomerGroupResponse } from '../models';
/**
 * CustomerGroupsApi - axios parameter creator
 * @export
 */
export declare const CustomerGroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete the customer group resource
     * @param {string} customerGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerGroupsCustomerGroupId: (customerGroupId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single customer group
     * @param {string} customerGroupId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerGroupCustomerGroupId: (customerGroupId: string, includes?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Gets a paginated list of all customer groups
     * @summary Get all customer groups
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerGroups: (includes?: string, perPage?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new customer group
     * @summary Create a new customer group
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomerGroups: (handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update the customer group resource
     * @param {string} customerGroupId
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCustomerGroupsCustomerGroupId: (customerGroupId: string, handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomerGroupsApi - functional programming interface
 * @export
 */
export declare const CustomerGroupsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete the customer group resource
     * @param {string} customerGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerGroupsCustomerGroupId(customerGroupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a single customer group
     * @param {string} customerGroupId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerGroupCustomerGroupId(customerGroupId: string, includes?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>>;
    /**
     * Gets a paginated list of all customer groups
     * @summary Get all customer groups
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerGroups(includes?: string, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupCollection>>;
    /**
     * Create a new customer group
     * @summary Create a new customer group
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomerGroups(handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>>;
    /**
     *
     * @summary Update the customer group resource
     * @param {string} customerGroupId
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCustomerGroupsCustomerGroupId(customerGroupId: string, handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupResponse>>;
};
/**
 * CustomerGroupsApi - factory interface
 * @export
 */
export declare const CustomerGroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete the customer group resource
     * @param {string} customerGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerGroupsCustomerGroupId(customerGroupId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a single customer group
     * @param {string} customerGroupId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerGroupCustomerGroupId(customerGroupId: string, includes?: string, options?: any): AxiosPromise<CustomerGroupResponse>;
    /**
     * Gets a paginated list of all customer groups
     * @summary Get all customer groups
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerGroups(includes?: string, perPage?: number, options?: any): AxiosPromise<CustomerGroupCollection>;
    /**
     * Create a new customer group
     * @summary Create a new customer group
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomerGroups(handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any): AxiosPromise<CustomerGroupResponse>;
    /**
     *
     * @summary Update the customer group resource
     * @param {string} customerGroupId
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCustomerGroupsCustomerGroupId(customerGroupId: string, handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any): AxiosPromise<CustomerGroupResponse>;
};
/**
 * CustomerGroupsApi - object-oriented interface
 * @export
 * @class CustomerGroupsApi
 * @extends {BaseAPI}
 */
export declare class CustomerGroupsApi extends BaseAPI {
    /**
     *
     * @summary Delete the customer group resource
     * @param {string} customerGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    deleteCustomerGroupsCustomerGroupId(customerGroupId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get a single customer group
     * @param {string} customerGroupId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    getCustomerGroupCustomerGroupId(customerGroupId: string, includes?: string, options?: any): Promise<import("axios").AxiosResponse<CustomerGroupResponse, any>>;
    /**
     * Gets a paginated list of all customer groups
     * @summary Get all customer groups
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    getCustomerGroups(includes?: string, perPage?: number, options?: any): Promise<import("axios").AxiosResponse<CustomerGroupCollection, any>>;
    /**
     * Create a new customer group
     * @summary Create a new customer group
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    postCustomerGroups(handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any): Promise<import("axios").AxiosResponse<CustomerGroupResponse, any>>;
    /**
     *
     * @summary Update the customer group resource
     * @param {string} customerGroupId
     * @param {string} [handle]
     * @param {string} [name]
     * @param {boolean} [_default]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupsApi
     */
    putCustomerGroupsCustomerGroupId(customerGroupId: string, handle?: string, name?: string, _default?: boolean, system?: boolean, options?: any): Promise<import("axios").AxiosResponse<CustomerGroupResponse, any>>;
}
