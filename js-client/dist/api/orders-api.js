"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrdersApi = exports.OrdersApiFactory = exports.OrdersApiFp = exports.OrdersApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * OrdersApi - axios parameter creator
 * @export
 */
exports.OrdersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes an order line from an order
         * @summary Delete an order line
         * @param {string} orderLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdersLinesOrderId: (orderLineId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderLineId' is not null or undefined
            if (orderLineId === null || orderLineId === undefined) {
                throw new base_1.RequiredError('orderLineId', 'Required parameter orderLineId was null or undefined when calling deleteOrdersLinesOrderId.');
            }
            const localVarPath = `/orders/lines/{orderLineId}`
                .replace(`{${"orderLineId"}}`, encodeURIComponent(String(orderLineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
         * @summary Get orders
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: (include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Export orders into a base64 encoded string
         * @summary Get Order export
         * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
         * @param {string} format The export format, must be present in config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBulk: (orders, format, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orders' is not null or undefined
            if (orders === null || orders === undefined) {
                throw new base_1.RequiredError('orders', 'Required parameter orders was null or undefined when calling getOrdersBulk.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new base_1.RequiredError('format', 'Required parameter format was null or undefined when calling getOrdersBulk.');
            }
            const localVarPath = `/orders/bulk`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (orders !== undefined) {
                localVarQueryParameter['orders'] = orders;
            }
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
         * @summary Get order status preview email
         * @param {string} id An order id to use for the template
         * @param {string} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersEmailPreviewStatus: (id, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getOrdersEmailPreviewStatus.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new base_1.RequiredError('status', 'Required parameter status was null or undefined when calling getOrdersEmailPreviewStatus.');
            }
            const localVarPath = `/orders/email-preview/{status}`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an orders invoice
         * @summary Get order invoice
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersIdInvoice: (orderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling getOrdersIdInvoice.');
            }
            const localVarPath = `/orders/{orderId}/invoice`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This will return a list of all ShippingMethod\'s that are available for this order.
         * @summary Get Order Shipping Methods
         * @param {string} orderId
         * @param {string} [include] The available resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersIdShippingMethods: (orderId, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling getOrdersIdShippingMethods.');
            }
            const localVarPath = `/orders/{orderId}/shipping/methods`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
         * @summary Get Order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersOrderId: (orderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling getOrdersOrderId.');
            }
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all order types currently in the system
         * @summary Get order types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersTypes: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Order from a Basket instance
         * @summary Create Order
         * @param {CreateOrderBody} [createOrderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrders: (createOrderBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof createOrderBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createOrderBody !== undefined ? createOrderBody : {}) : (createOrderBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
         * @summary Bulk update orders
         * @param {InlineObject9} [inlineObject9]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersBulk: (inlineObject9, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders/bulk`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject9 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject9 !== undefined ? inlineObject9 : {}) : (inlineObject9 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
         * @summary Expire an Order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersOrderIdExpire: (orderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling postOrdersOrderIdExpire.');
            }
            const localVarPath = `/orders/{orderId}/expire`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Processes an order on the API
         * @param {InlineObject8} [inlineObject8]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersProcess: (inlineObject8, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders/process`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject8 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject8 !== undefined ? inlineObject8 : {}) : (inlineObject8 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add contact details to an order
         * @summary Add contact details
         * @param {string} orderId
         * @param {InlineObject11} [inlineObject11]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdContact: (orderId, inlineObject11, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling putOrdersIdContact.');
            }
            const localVarPath = `/orders/{orderId}/contact`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject11 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject11 !== undefined ? inlineObject11 : {}) : (inlineObject11 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds an order line to an order
         * @summary Add order line
         * @param {string} orderId
         * @param {InlineObject12} [inlineObject12]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdLines: (orderId, inlineObject12, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling putOrdersIdLines.');
            }
            const localVarPath = `/orders/{orderId}/lines`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject12 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject12 !== undefined ? inlineObject12 : {}) : (inlineObject12 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an orders shipping address
         * @summary Update shipping address
         * @param {string} orderId
         * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdShippingAddress: (orderId, address, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling putOrdersIdShippingAddress.');
            }
            const localVarPath = `/orders/{orderId}/shipping/address`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof address !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(address !== undefined ? address : {}) : (address || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds a shipping cost to an Order
         * @summary Add shipping cost
         * @param {string} orderId
         * @param {string} [include] Related resources to include in response
         * @param {InlineObject10} [inlineObject10]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdShippingCost: (orderId, include, inlineObject10, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling putOrdersIdShippingCost.');
            }
            const localVarPath = `/orders/{orderId}/shipping/cost`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject10 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject10 !== undefined ? inlineObject10 : {}) : (inlineObject10 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an Order
         * @summary Update Order
         * @param {string} orderId
         * @param {string} [include]
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersOrderId: (orderId, include, inlineObject7, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling putOrdersOrderId.');
            }
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject7 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {}) : (inlineObject7 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an orders billing address
         * @summary Update billing address
         * @param {string} orderId
         * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersOrderIdBillingAddress: (orderId, address, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling putOrdersOrderIdBillingAddress.');
            }
            const localVarPath = `/orders/{orderId}/billing/address`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof address !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(address !== undefined ? address : {}) : (address || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
exports.OrdersApiFp = function (configuration) {
    return {
        /**
         * Deletes an order line from an order
         * @summary Delete an order line
         * @param {string} orderLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdersLinesOrderId(orderLineId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).deleteOrdersLinesOrderId(orderLineId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
         * @summary Get orders
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).getOrders(include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Export orders into a base64 encoded string
         * @summary Get Order export
         * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
         * @param {string} format The export format, must be present in config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBulk(orders, format, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).getOrdersBulk(orders, format, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
         * @summary Get order status preview email
         * @param {string} id An order id to use for the template
         * @param {string} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersEmailPreviewStatus(id, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).getOrdersEmailPreviewStatus(id, status, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an orders invoice
         * @summary Get order invoice
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersIdInvoice(orderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).getOrdersIdInvoice(orderId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * This will return a list of all ShippingMethod\'s that are available for this order.
         * @summary Get Order Shipping Methods
         * @param {string} orderId
         * @param {string} [include] The available resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersIdShippingMethods(orderId, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).getOrdersIdShippingMethods(orderId, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
         * @summary Get Order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersOrderId(orderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).getOrdersOrderId(orderId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns all order types currently in the system
         * @summary Get order types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersTypes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).getOrdersTypes(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Order from a Basket instance
         * @summary Create Order
         * @param {CreateOrderBody} [createOrderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrders(createOrderBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).postOrders(createOrderBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
         * @summary Bulk update orders
         * @param {InlineObject9} [inlineObject9]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersBulk(inlineObject9, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).postOrdersBulk(inlineObject9, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
         * @summary Expire an Order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersOrderIdExpire(orderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).postOrdersOrderIdExpire(orderId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Processes an order on the API
         * @param {InlineObject8} [inlineObject8]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersProcess(inlineObject8, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).postOrdersProcess(inlineObject8, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add contact details to an order
         * @summary Add contact details
         * @param {string} orderId
         * @param {InlineObject11} [inlineObject11]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdContact(orderId, inlineObject11, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).putOrdersIdContact(orderId, inlineObject11, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Adds an order line to an order
         * @summary Add order line
         * @param {string} orderId
         * @param {InlineObject12} [inlineObject12]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdLines(orderId, inlineObject12, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).putOrdersIdLines(orderId, inlineObject12, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update an orders shipping address
         * @summary Update shipping address
         * @param {string} orderId
         * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdShippingAddress(orderId, address, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).putOrdersIdShippingAddress(orderId, address, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Adds a shipping cost to an Order
         * @summary Add shipping cost
         * @param {string} orderId
         * @param {string} [include] Related resources to include in response
         * @param {InlineObject10} [inlineObject10]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdShippingCost(orderId, include, inlineObject10, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).putOrdersIdShippingCost(orderId, include, inlineObject10, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update an Order
         * @summary Update Order
         * @param {string} orderId
         * @param {string} [include]
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersOrderId(orderId, include, inlineObject7, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).putOrdersOrderId(orderId, include, inlineObject7, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update an orders billing address
         * @summary Update billing address
         * @param {string} orderId
         * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersOrderIdBillingAddress(orderId, address, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrdersApiAxiosParamCreator(configuration).putOrdersOrderIdBillingAddress(orderId, address, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * OrdersApi - factory interface
 * @export
 */
exports.OrdersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Deletes an order line from an order
         * @summary Delete an order line
         * @param {string} orderLineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdersLinesOrderId(orderLineId, options) {
            return exports.OrdersApiFp(configuration).deleteOrdersLinesOrderId(orderLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
         * @summary Get orders
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(include, options) {
            return exports.OrdersApiFp(configuration).getOrders(include, options).then((request) => request(axios, basePath));
        },
        /**
         * Export orders into a base64 encoded string
         * @summary Get Order export
         * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
         * @param {string} format The export format, must be present in config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBulk(orders, format, options) {
            return exports.OrdersApiFp(configuration).getOrdersBulk(orders, format, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
         * @summary Get order status preview email
         * @param {string} id An order id to use for the template
         * @param {string} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersEmailPreviewStatus(id, status, options) {
            return exports.OrdersApiFp(configuration).getOrdersEmailPreviewStatus(id, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an orders invoice
         * @summary Get order invoice
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersIdInvoice(orderId, options) {
            return exports.OrdersApiFp(configuration).getOrdersIdInvoice(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * This will return a list of all ShippingMethod\'s that are available for this order.
         * @summary Get Order Shipping Methods
         * @param {string} orderId
         * @param {string} [include] The available resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersIdShippingMethods(orderId, include, options) {
            return exports.OrdersApiFp(configuration).getOrdersIdShippingMethods(orderId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
         * @summary Get Order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersOrderId(orderId, options) {
            return exports.OrdersApiFp(configuration).getOrdersOrderId(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all order types currently in the system
         * @summary Get order types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersTypes(options) {
            return exports.OrdersApiFp(configuration).getOrdersTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Order from a Basket instance
         * @summary Create Order
         * @param {CreateOrderBody} [createOrderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrders(createOrderBody, options) {
            return exports.OrdersApiFp(configuration).postOrders(createOrderBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
         * @summary Bulk update orders
         * @param {InlineObject9} [inlineObject9]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersBulk(inlineObject9, options) {
            return exports.OrdersApiFp(configuration).postOrdersBulk(inlineObject9, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
         * @summary Expire an Order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersOrderIdExpire(orderId, options) {
            return exports.OrdersApiFp(configuration).postOrdersOrderIdExpire(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Processes an order on the API
         * @param {InlineObject8} [inlineObject8]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrdersProcess(inlineObject8, options) {
            return exports.OrdersApiFp(configuration).postOrdersProcess(inlineObject8, options).then((request) => request(axios, basePath));
        },
        /**
         * Add contact details to an order
         * @summary Add contact details
         * @param {string} orderId
         * @param {InlineObject11} [inlineObject11]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdContact(orderId, inlineObject11, options) {
            return exports.OrdersApiFp(configuration).putOrdersIdContact(orderId, inlineObject11, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds an order line to an order
         * @summary Add order line
         * @param {string} orderId
         * @param {InlineObject12} [inlineObject12]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdLines(orderId, inlineObject12, options) {
            return exports.OrdersApiFp(configuration).putOrdersIdLines(orderId, inlineObject12, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an orders shipping address
         * @summary Update shipping address
         * @param {string} orderId
         * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdShippingAddress(orderId, address, options) {
            return exports.OrdersApiFp(configuration).putOrdersIdShippingAddress(orderId, address, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a shipping cost to an Order
         * @summary Add shipping cost
         * @param {string} orderId
         * @param {string} [include] Related resources to include in response
         * @param {InlineObject10} [inlineObject10]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersIdShippingCost(orderId, include, inlineObject10, options) {
            return exports.OrdersApiFp(configuration).putOrdersIdShippingCost(orderId, include, inlineObject10, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Order
         * @summary Update Order
         * @param {string} orderId
         * @param {string} [include]
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersOrderId(orderId, include, inlineObject7, options) {
            return exports.OrdersApiFp(configuration).putOrdersOrderId(orderId, include, inlineObject7, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an orders billing address
         * @summary Update billing address
         * @param {string} orderId
         * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrdersOrderIdBillingAddress(orderId, address, options) {
            return exports.OrdersApiFp(configuration).putOrdersOrderIdBillingAddress(orderId, address, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
class OrdersApi extends base_1.BaseAPI {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    deleteOrdersLinesOrderId(orderLineId, options) {
        return exports.OrdersApiFp(this.configuration).deleteOrdersLinesOrderId(orderLineId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrders(include, options) {
        return exports.OrdersApiFp(this.configuration).getOrders(include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersBulk(orders, format, options) {
        return exports.OrdersApiFp(this.configuration).getOrdersBulk(orders, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} id An order id to use for the template
     * @param {string} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersEmailPreviewStatus(id, status, options) {
        return exports.OrdersApiFp(this.configuration).getOrdersEmailPreviewStatus(id, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersIdInvoice(orderId, options) {
        return exports.OrdersApiFp(this.configuration).getOrdersIdInvoice(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersIdShippingMethods(orderId, include, options) {
        return exports.OrdersApiFp(this.configuration).getOrdersIdShippingMethods(orderId, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersOrderId(orderId, options) {
        return exports.OrdersApiFp(this.configuration).getOrdersOrderId(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersTypes(options) {
        return exports.OrdersApiFp(this.configuration).getOrdersTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrders(createOrderBody, options) {
        return exports.OrdersApiFp(this.configuration).postOrders(createOrderBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersBulk(inlineObject9, options) {
        return exports.OrdersApiFp(this.configuration).postOrdersBulk(inlineObject9, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersOrderIdExpire(orderId, options) {
        return exports.OrdersApiFp(this.configuration).postOrdersOrderIdExpire(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersProcess(inlineObject8, options) {
        return exports.OrdersApiFp(this.configuration).postOrdersProcess(inlineObject8, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdContact(orderId, inlineObject11, options) {
        return exports.OrdersApiFp(this.configuration).putOrdersIdContact(orderId, inlineObject11, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdLines(orderId, inlineObject12, options) {
        return exports.OrdersApiFp(this.configuration).putOrdersIdLines(orderId, inlineObject12, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdShippingAddress(orderId, address, options) {
        return exports.OrdersApiFp(this.configuration).putOrdersIdShippingAddress(orderId, address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdShippingCost(orderId, include, inlineObject10, options) {
        return exports.OrdersApiFp(this.configuration).putOrdersIdShippingCost(orderId, include, inlineObject10, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersOrderId(orderId, include, inlineObject7, options) {
        return exports.OrdersApiFp(this.configuration).putOrdersOrderId(orderId, include, inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersOrderIdBillingAddress(orderId, address, options) {
        return exports.OrdersApiFp(this.configuration).putOrdersOrderIdBillingAddress(orderId, address, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrdersApi = OrdersApi;
