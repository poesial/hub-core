"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShippingApi = exports.ShippingApiFactory = exports.ShippingApiFp = exports.ShippingApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ShippingApi - axios parameter creator
 * @export
 */
exports.ShippingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes a shipping method.
         * @summary Delete shipping method
         * @param {string} shippingMethodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingShippingMethodId: (shippingMethodId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new base_1.RequiredError('shippingMethodId', 'Required parameter shippingMethodId was null or undefined when calling deleteShippingShippingMethodId.');
            }
            const localVarPath = `/shipping/{shippingMethodId}`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a paginated list of shipping methods
         * @summary Get shipping methods
         * @param {number} [perPage]
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipping: (perPage, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/shipping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a shipping method by it\'s ID.
         * @summary Get shipping methods
         * @param {string} shippingMethodId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingShippingMethodId: (shippingMethodId, include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new base_1.RequiredError('shippingMethodId', 'Required parameter shippingMethodId was null or undefined when calling getShippingShippingMethodId.');
            }
            const localVarPath = `/shipping/{shippingMethodId}`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a paginated list of shipping zones.
         * @summary Get Shipping Zones
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZones: (include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/shipping/zones`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a shipping zone by it\'s ID.
         * @summary Get Shipping Zone
         * @param {string} shippingZoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZonesShippingZoneId: (shippingZoneId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shippingZoneId' is not null or undefined
            if (shippingZoneId === null || shippingZoneId === undefined) {
                throw new base_1.RequiredError('shippingZoneId', 'Required parameter shippingZoneId was null or undefined when calling getShippingZonesShippingZoneId.');
            }
            const localVarPath = `/shipping/zones/{shippingZoneId}`
                .replace(`{${"shippingZoneId"}}`, encodeURIComponent(String(shippingZoneId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new shipping method.
         * @summary Create shipping method
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShipping: (inlineObject26, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/shipping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject26 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject26 !== undefined ? inlineObject26 : {}) : (inlineObject26 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a price to a shipping method.
         * @summary Add shipping price
         * @param {string} shippingMethodId
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingIdPrices: (shippingMethodId, inlineObject29, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new base_1.RequiredError('shippingMethodId', 'Required parameter shippingMethodId was null or undefined when calling postShippingIdPrices.');
            }
            const localVarPath = `/shipping/{shippingMethodId}/prices`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject29 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject29 !== undefined ? inlineObject29 : {}) : (inlineObject29 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new shipping zone
         * @summary Create Shipping Zone
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingZones: (inlineObject28, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/shipping/zones`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject28 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject28 !== undefined ? inlineObject28 : {}) : (inlineObject28 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update shipping method users
         * @summary Update shipping method users
         * @param {string} id
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingIdUsers: (id, inlineObject32, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling putShippingIdUsers.');
            }
            const localVarPath = `/shipping/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject32 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject32 !== undefined ? inlineObject32 : {}) : (inlineObject32 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a shipping price
         * @summary Update shipping price
         * @param {string} shippingPriceId
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingPricesShippingPriceId: (shippingPriceId, inlineObject30, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shippingPriceId' is not null or undefined
            if (shippingPriceId === null || shippingPriceId === undefined) {
                throw new base_1.RequiredError('shippingPriceId', 'Required parameter shippingPriceId was null or undefined when calling putShippingPricesShippingPriceId.');
            }
            const localVarPath = `/shipping/prices/{shippingPriceId}`
                .replace(`{${"shippingPriceId"}}`, encodeURIComponent(String(shippingPriceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject30 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject30 !== undefined ? inlineObject30 : {}) : (inlineObject30 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update shipping method by it\'s ID
         * @summary Update shipping method
         * @param {string} shippingMethodId
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodId: (shippingMethodId, inlineObject27, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new base_1.RequiredError('shippingMethodId', 'Required parameter shippingMethodId was null or undefined when calling putShippingShippingMethodId.');
            }
            const localVarPath = `/shipping/{shippingMethodId}`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject27 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject27 !== undefined ? inlineObject27 : {}) : (inlineObject27 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a shipping method\'s zones.
         * @summary Update shipping method zones
         * @param {string} shippingMethodId
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodIdZones: (shippingMethodId, inlineObject31, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new base_1.RequiredError('shippingMethodId', 'Required parameter shippingMethodId was null or undefined when calling putShippingShippingMethodIdZones.');
            }
            const localVarPath = `/shipping/{shippingMethodId}/zones`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject31 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject31 !== undefined ? inlineObject31 : {}) : (inlineObject31 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ShippingApi - functional programming interface
 * @export
 */
exports.ShippingApiFp = function (configuration) {
    return {
        /**
         * Deletes a shipping method.
         * @summary Delete shipping method
         * @param {string} shippingMethodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingShippingMethodId(shippingMethodId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).deleteShippingShippingMethodId(shippingMethodId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a paginated list of shipping methods
         * @summary Get shipping methods
         * @param {number} [perPage]
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipping(perPage, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).getShipping(perPage, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a shipping method by it\'s ID.
         * @summary Get shipping methods
         * @param {string} shippingMethodId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingShippingMethodId(shippingMethodId, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).getShippingShippingMethodId(shippingMethodId, include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a paginated list of shipping zones.
         * @summary Get Shipping Zones
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZones(include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).getShippingZones(include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a shipping zone by it\'s ID.
         * @summary Get Shipping Zone
         * @param {string} shippingZoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZonesShippingZoneId(shippingZoneId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).getShippingZonesShippingZoneId(shippingZoneId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new shipping method.
         * @summary Create shipping method
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShipping(inlineObject26, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).postShipping(inlineObject26, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a price to a shipping method.
         * @summary Add shipping price
         * @param {string} shippingMethodId
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingIdPrices(shippingMethodId, inlineObject29, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).postShippingIdPrices(shippingMethodId, inlineObject29, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new shipping zone
         * @summary Create Shipping Zone
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingZones(inlineObject28, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).postShippingZones(inlineObject28, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update shipping method users
         * @summary Update shipping method users
         * @param {string} id
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingIdUsers(id, inlineObject32, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).putShippingIdUsers(id, inlineObject32, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update a shipping price
         * @summary Update shipping price
         * @param {string} shippingPriceId
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update shipping method by it\'s ID
         * @summary Update shipping method
         * @param {string} shippingMethodId
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodId(shippingMethodId, inlineObject27, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).putShippingShippingMethodId(shippingMethodId, inlineObject27, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update a shipping method\'s zones.
         * @summary Update shipping method zones
         * @param {string} shippingMethodId
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ShippingApiAxiosParamCreator(configuration).putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ShippingApi - factory interface
 * @export
 */
exports.ShippingApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Deletes a shipping method.
         * @summary Delete shipping method
         * @param {string} shippingMethodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingShippingMethodId(shippingMethodId, options) {
            return exports.ShippingApiFp(configuration).deleteShippingShippingMethodId(shippingMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of shipping methods
         * @summary Get shipping methods
         * @param {number} [perPage]
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipping(perPage, include, options) {
            return exports.ShippingApiFp(configuration).getShipping(perPage, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a shipping method by it\'s ID.
         * @summary Get shipping methods
         * @param {string} shippingMethodId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingShippingMethodId(shippingMethodId, include, options) {
            return exports.ShippingApiFp(configuration).getShippingShippingMethodId(shippingMethodId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of shipping zones.
         * @summary Get Shipping Zones
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZones(include, options) {
            return exports.ShippingApiFp(configuration).getShippingZones(include, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a shipping zone by it\'s ID.
         * @summary Get Shipping Zone
         * @param {string} shippingZoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZonesShippingZoneId(shippingZoneId, options) {
            return exports.ShippingApiFp(configuration).getShippingZonesShippingZoneId(shippingZoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new shipping method.
         * @summary Create shipping method
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShipping(inlineObject26, options) {
            return exports.ShippingApiFp(configuration).postShipping(inlineObject26, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a price to a shipping method.
         * @summary Add shipping price
         * @param {string} shippingMethodId
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingIdPrices(shippingMethodId, inlineObject29, options) {
            return exports.ShippingApiFp(configuration).postShippingIdPrices(shippingMethodId, inlineObject29, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new shipping zone
         * @summary Create Shipping Zone
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingZones(inlineObject28, options) {
            return exports.ShippingApiFp(configuration).postShippingZones(inlineObject28, options).then((request) => request(axios, basePath));
        },
        /**
         * Update shipping method users
         * @summary Update shipping method users
         * @param {string} id
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingIdUsers(id, inlineObject32, options) {
            return exports.ShippingApiFp(configuration).putShippingIdUsers(id, inlineObject32, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shipping price
         * @summary Update shipping price
         * @param {string} shippingPriceId
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options) {
            return exports.ShippingApiFp(configuration).putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options).then((request) => request(axios, basePath));
        },
        /**
         * Update shipping method by it\'s ID
         * @summary Update shipping method
         * @param {string} shippingMethodId
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodId(shippingMethodId, inlineObject27, options) {
            return exports.ShippingApiFp(configuration).putShippingShippingMethodId(shippingMethodId, inlineObject27, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shipping method\'s zones.
         * @summary Update shipping method zones
         * @param {string} shippingMethodId
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options) {
            return exports.ShippingApiFp(configuration).putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
class ShippingApi extends base_1.BaseAPI {
    /**
     * Deletes a shipping method.
     * @summary Delete shipping method
     * @param {string} shippingMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    deleteShippingShippingMethodId(shippingMethodId, options) {
        return exports.ShippingApiFp(this.configuration).deleteShippingShippingMethodId(shippingMethodId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a paginated list of shipping methods
     * @summary Get shipping methods
     * @param {number} [perPage]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShipping(perPage, include, options) {
        return exports.ShippingApiFp(this.configuration).getShipping(perPage, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a shipping method by it\'s ID.
     * @summary Get shipping methods
     * @param {string} shippingMethodId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShippingShippingMethodId(shippingMethodId, include, options) {
        return exports.ShippingApiFp(this.configuration).getShippingShippingMethodId(shippingMethodId, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a paginated list of shipping zones.
     * @summary Get Shipping Zones
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShippingZones(include, options) {
        return exports.ShippingApiFp(this.configuration).getShippingZones(include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a shipping zone by it\'s ID.
     * @summary Get Shipping Zone
     * @param {string} shippingZoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShippingZonesShippingZoneId(shippingZoneId, options) {
        return exports.ShippingApiFp(this.configuration).getShippingZonesShippingZoneId(shippingZoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new shipping method.
     * @summary Create shipping method
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    postShipping(inlineObject26, options) {
        return exports.ShippingApiFp(this.configuration).postShipping(inlineObject26, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a price to a shipping method.
     * @summary Add shipping price
     * @param {string} shippingMethodId
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    postShippingIdPrices(shippingMethodId, inlineObject29, options) {
        return exports.ShippingApiFp(this.configuration).postShippingIdPrices(shippingMethodId, inlineObject29, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new shipping zone
     * @summary Create Shipping Zone
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    postShippingZones(inlineObject28, options) {
        return exports.ShippingApiFp(this.configuration).postShippingZones(inlineObject28, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update shipping method users
     * @summary Update shipping method users
     * @param {string} id
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingIdUsers(id, inlineObject32, options) {
        return exports.ShippingApiFp(this.configuration).putShippingIdUsers(id, inlineObject32, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a shipping price
     * @summary Update shipping price
     * @param {string} shippingPriceId
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options) {
        return exports.ShippingApiFp(this.configuration).putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update shipping method by it\'s ID
     * @summary Update shipping method
     * @param {string} shippingMethodId
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingShippingMethodId(shippingMethodId, inlineObject27, options) {
        return exports.ShippingApiFp(this.configuration).putShippingShippingMethodId(shippingMethodId, inlineObject27, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a shipping method\'s zones.
     * @summary Update shipping method zones
     * @param {string} shippingMethodId
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options) {
        return exports.ShippingApiFp(this.configuration).putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ShippingApi = ShippingApi;
