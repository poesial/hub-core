/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { SavedSearchCollection } from '../models';
import { SavedSearchResponse } from '../models';
import { SearchResponse } from '../models';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearchesSavedSearchId: (savedSearchId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearches: (options?: any) => Promise<RequestArgs>;
    /**
     * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'categories' | 'products'} [searchType]
     * @param {string} [term]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {boolean} [fullResponse]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearch: (channel?: string, category?: string, page?: number, searchType?: 'categories' | 'products', term?: string, rank?: boolean, idsOnly?: boolean, include?: string, sort?: string, fullResponse?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savedSearchesSavedSearchIdGet: (savedSearchId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration) => {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearchesSavedSearchId(savedSearchId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearches(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedSearchCollection>>;
    /**
     * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'categories' | 'products'} [searchType]
     * @param {string} [term]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {boolean} [fullResponse]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearch(channel?: string, category?: string, page?: number, searchType?: 'categories' | 'products', term?: string, rank?: boolean, idsOnly?: boolean, include?: string, sort?: string, fullResponse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponse>>;
    /**
     *
     * @summary Get saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savedSearchesSavedSearchIdGet(savedSearchId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedSearchResponse>>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearchesSavedSearchId(savedSearchId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearches(options?: any): AxiosPromise<SavedSearchCollection>;
    /**
     * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'categories' | 'products'} [searchType]
     * @param {string} [term]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {boolean} [fullResponse]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearch(channel?: string, category?: string, page?: number, searchType?: 'categories' | 'products', term?: string, rank?: boolean, idsOnly?: boolean, include?: string, sort?: string, fullResponse?: boolean, options?: any): AxiosPromise<SearchResponse>;
    /**
     *
     * @summary Get saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savedSearchesSavedSearchIdGet(savedSearchId: string, options?: any): AxiosPromise<SavedSearchResponse>;
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    deleteSavedSearchesSavedSearchId(savedSearchId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    getSavedSearches(options?: any): Promise<import("axios").AxiosResponse<import("../models").SavedSearchCollectionAllOf, any>>;
    /**
     * Search across products or categories  You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'categories' | 'products'} [searchType]
     * @param {string} [term]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {boolean} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {boolean} [fullResponse]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    getSearch(channel?: string, category?: string, page?: number, searchType?: 'categories' | 'products', term?: string, rank?: boolean, idsOnly?: boolean, include?: string, sort?: string, fullResponse?: boolean, options?: any): Promise<import("axios").AxiosResponse<SearchResponse, any>>;
    /**
     *
     * @summary Get saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    savedSearchesSavedSearchIdGet(savedSearchId: string, options?: any): Promise<import("axios").AxiosResponse<SavedSearchResponse, any>>;
}
