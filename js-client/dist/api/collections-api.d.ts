/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CollectionCollection } from '../models';
import { CollectionResponse } from '../models';
import { InlineObject1 } from '../models';
import { InlineObject2 } from '../models';
import { InlineObject3 } from '../models';
import { InlineObject4 } from '../models';
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export declare const CollectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionsCollectionId: (collectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollections: (include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionsCollectionId: (collectionId: string, include?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollections: (inlineObject3?: InlineObject3, options?: any) => Promise<RequestArgs>;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionIdProducts: (collectionId: string, inlineObject2?: InlineObject2, options?: any) => Promise<RequestArgs>;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionRoutes: (collectionId: string, inlineObject1?: InlineObject1, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCollectionsCollectionId: (collectionId: string, inlineObject4?: InlineObject4, options?: any) => Promise<RequestArgs>;
};
/**
 * CollectionsApi - functional programming interface
 * @export
 */
export declare const CollectionsApiFp: (configuration?: Configuration) => {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionsCollectionId(collectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionCollection>>;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionsCollectionId(collectionId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>>;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollections(inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>>;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionIdProducts(collectionId: string, inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>>;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionRoutes(collectionId: string, inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>>;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCollectionsCollectionId(collectionId: string, inlineObject4?: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>>;
};
/**
 * CollectionsApi - factory interface
 * @export
 */
export declare const CollectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionsCollectionId(collectionId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): AxiosPromise<CollectionCollection>;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionsCollectionId(collectionId: string, include?: string, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollections(inlineObject3?: InlineObject3, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionIdProducts(collectionId: string, inlineObject2?: InlineObject2, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionRoutes(collectionId: string, inlineObject1?: InlineObject1, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCollectionsCollectionId(collectionId: string, inlineObject4?: InlineObject4, options?: any): AxiosPromise<CollectionResponse>;
};
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export declare class CollectionsApi extends BaseAPI {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    deleteCollectionsCollectionId(collectionId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): Promise<import("axios").AxiosResponse<CollectionCollection, any>>;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollectionsCollectionId(collectionId: string, include?: string, options?: any): Promise<import("axios").AxiosResponse<CollectionResponse, any>>;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    postCollections(inlineObject3?: InlineObject3, options?: any): Promise<import("axios").AxiosResponse<CollectionResponse, any>>;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    postCollectionsCollectionIdProducts(collectionId: string, inlineObject2?: InlineObject2, options?: any): Promise<import("axios").AxiosResponse<CollectionResponse, any>>;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    postCollectionsCollectionRoutes(collectionId: string, inlineObject1?: InlineObject1, options?: any): Promise<import("axios").AxiosResponse<CollectionResponse, any>>;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    putCollectionsCollectionId(collectionId: string, inlineObject4?: InlineObject4, options?: any): Promise<import("axios").AxiosResponse<CollectionResponse, any>>;
}
