"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasketsApi = exports.BasketsApiFactory = exports.BasketsApiFp = exports.BasketsApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * BasketsApi - axios parameter creator
 * @export
 */
exports.BasketsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Removes basket lines from a basket
         * @summary Delete basket lines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketLines: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/basket-lines`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a basket
         * @summary Delete a basket by ID
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketsBasketId: (basketId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling deleteBasketsBasketId.');
            }
            const localVarPath = `/baskets/{basketId}`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
         * @summary Remove discount
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketsBasketIdDiscounts: (basketId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling deleteBasketsBasketIdDiscounts.');
            }
            const localVarPath = `/baskets/{basketId}/discounts`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a paginated list of baskets
         * @summary Get baskets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaskets: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/baskets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a basket by it\'s ID
         * @summary Get basket
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsBasketId: (basketId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling getBasketsBasketId.');
            }
            const localVarPath = `/baskets/{basketId}`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This request will get the current active basket for a user
         * @summary Get the current basket for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsCurrent: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/baskets/current`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns an authenticatd users saved baskets.
         * @summary Get a users saved baskets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsSaved: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/baskets/saved`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add lines to a basket
         * @summary Create basket lines
         * @param {CreateBasketLinesBody} [createBasketLinesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketLines: (createBasketLinesBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/basket-lines`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof createBasketLinesBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createBasketLinesBody !== undefined ? createBasketLinesBody : {}) : (createBasketLinesBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create Basket
         * @param {CreateBasketBody} [createBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBaskets: (createBasketBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/baskets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof createBasketBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createBasketBody !== undefined ? createBasketBody : {}) : (createBasketBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * A user is able to \"claim\" a guest basket.
         * @summary Allow a user to claim a basket
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdClaim: (basketId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling postBasketsBasketIdClaim.');
            }
            const localVarPath = `/baskets/{basketId}/claim`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Allows you to add custom meta information to a basket.
         * @summary Add meta information
         * @param {string} basketId
         * @param {AddBasketMetaBody} [addBasketMetaBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdMeta: (basketId, addBasketMetaBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling postBasketsBasketIdMeta.');
            }
            const localVarPath = `/baskets/{basketId}/meta`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof addBasketMetaBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addBasketMetaBody !== undefined ? addBasketMetaBody : {}) : (addBasketMetaBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Saves a basket to a users account.
         * @summary Save a basket for a user
         * @param {string} basketId
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdSave: (basketId, saveBasketBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling postBasketsBasketIdSave.');
            }
            const localVarPath = `/baskets/{basketId}/save`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof saveBasketBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(saveBasketBody !== undefined ? saveBasketBody : {}) : (saveBasketBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
         * @summary Resolve a basket
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsResolve: (saveBasketBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/baskets/resolve`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof saveBasketBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(saveBasketBody !== undefined ? saveBasketBody : {}) : (saveBasketBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a basket line based on it\'s ID.
         * @summary Update basket line
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineId: (basketLineId, basketLineUpdateBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketLineId' is not null or undefined
            if (basketLineId === null || basketLineId === undefined) {
                throw new base_1.RequiredError('basketLineId', 'Required parameter basketLineId was null or undefined when calling putBasketLinesBasketLineId.');
            }
            const localVarPath = `/basket-lines/{basketLineId}`
                .replace(`{${"basketLineId"}}`, encodeURIComponent(String(basketLineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof basketLineUpdateBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(basketLineUpdateBody !== undefined ? basketLineUpdateBody : {}) : (basketLineUpdateBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update basket line quantity
         * @summary Update basket line quantity
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineIdAdd: (basketLineId, basketLineUpdateBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketLineId' is not null or undefined
            if (basketLineId === null || basketLineId === undefined) {
                throw new base_1.RequiredError('basketLineId', 'Required parameter basketLineId was null or undefined when calling putBasketLinesBasketLineIdAdd.');
            }
            const localVarPath = `/basket-lines/{basketLineId}/add`
                .replace(`{${"basketLineId"}}`, encodeURIComponent(String(basketLineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof basketLineUpdateBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(basketLineUpdateBody !== undefined ? basketLineUpdateBody : {}) : (basketLineUpdateBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes quantity from a basket line
         * @summary Remove basket line quantity
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineIdRemove: (basketLineId, basketLineUpdateBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketLineId' is not null or undefined
            if (basketLineId === null || basketLineId === undefined) {
                throw new base_1.RequiredError('basketLineId', 'Required parameter basketLineId was null or undefined when calling putBasketLinesBasketLineIdRemove.');
            }
            const localVarPath = `/basket-lines/{basketLineId}/remove`
                .replace(`{${"basketLineId"}}`, encodeURIComponent(String(basketLineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof basketLineUpdateBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(basketLineUpdateBody !== undefined ? basketLineUpdateBody : {}) : (basketLineUpdateBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a basket
         * @summary Update a basket by ID
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketsBasketId: (basketId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling putBasketsBasketId.');
            }
            const localVarPath = `/baskets/{basketId}`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a saved basket on the API
         * @summary Update a saved basket
         * @param {string} basketId
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketsSavedBasketId: (basketId, saveBasketBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basketId' is not null or undefined
            if (basketId === null || basketId === undefined) {
                throw new base_1.RequiredError('basketId', 'Required parameter basketId was null or undefined when calling putBasketsSavedBasketId.');
            }
            const localVarPath = `/baskets/saved/{basketId}`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof saveBasketBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(saveBasketBody !== undefined ? saveBasketBody : {}) : (saveBasketBody || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BasketsApi - functional programming interface
 * @export
 */
exports.BasketsApiFp = function (configuration) {
    return {
        /**
         * Removes basket lines from a basket
         * @summary Delete basket lines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketLines(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).deleteBasketLines(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Deletes a basket
         * @summary Delete a basket by ID
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketsBasketId(basketId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).deleteBasketsBasketId(basketId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
         * @summary Remove discount
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketsBasketIdDiscounts(basketId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).deleteBasketsBasketIdDiscounts(basketId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a paginated list of baskets
         * @summary Get baskets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaskets(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).getBaskets(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a basket by it\'s ID
         * @summary Get basket
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsBasketId(basketId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).getBasketsBasketId(basketId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * This request will get the current active basket for a user
         * @summary Get the current basket for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsCurrent(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).getBasketsCurrent(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns an authenticatd users saved baskets.
         * @summary Get a users saved baskets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsSaved(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).getBasketsSaved(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add lines to a basket
         * @summary Create basket lines
         * @param {CreateBasketLinesBody} [createBasketLinesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketLines(createBasketLinesBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).postBasketLines(createBasketLinesBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Create Basket
         * @param {CreateBasketBody} [createBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBaskets(createBasketBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).postBaskets(createBasketBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * A user is able to \"claim\" a guest basket.
         * @summary Allow a user to claim a basket
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdClaim(basketId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).postBasketsBasketIdClaim(basketId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Allows you to add custom meta information to a basket.
         * @summary Add meta information
         * @param {string} basketId
         * @param {AddBasketMetaBody} [addBasketMetaBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdMeta(basketId, addBasketMetaBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).postBasketsBasketIdMeta(basketId, addBasketMetaBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Saves a basket to a users account.
         * @summary Save a basket for a user
         * @param {string} basketId
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdSave(basketId, saveBasketBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).postBasketsBasketIdSave(basketId, saveBasketBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
         * @summary Resolve a basket
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsResolve(saveBasketBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).postBasketsResolve(saveBasketBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update a basket line based on it\'s ID.
         * @summary Update basket line
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineId(basketLineId, basketLineUpdateBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).putBasketLinesBasketLineId(basketLineId, basketLineUpdateBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update basket line quantity
         * @summary Update basket line quantity
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineIdAdd(basketLineId, basketLineUpdateBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).putBasketLinesBasketLineIdAdd(basketLineId, basketLineUpdateBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Removes quantity from a basket line
         * @summary Remove basket line quantity
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineIdRemove(basketLineId, basketLineUpdateBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).putBasketLinesBasketLineIdRemove(basketLineId, basketLineUpdateBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Updates a basket
         * @summary Update a basket by ID
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketsBasketId(basketId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).putBasketsBasketId(basketId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Updates a saved basket on the API
         * @summary Update a saved basket
         * @param {string} basketId
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketsSavedBasketId(basketId, saveBasketBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasketsApiAxiosParamCreator(configuration).putBasketsSavedBasketId(basketId, saveBasketBody, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * BasketsApi - factory interface
 * @export
 */
exports.BasketsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Removes basket lines from a basket
         * @summary Delete basket lines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketLines(options) {
            return exports.BasketsApiFp(configuration).deleteBasketLines(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a basket
         * @summary Delete a basket by ID
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketsBasketId(basketId, options) {
            return exports.BasketsApiFp(configuration).deleteBasketsBasketId(basketId, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
         * @summary Remove discount
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBasketsBasketIdDiscounts(basketId, options) {
            return exports.BasketsApiFp(configuration).deleteBasketsBasketIdDiscounts(basketId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of baskets
         * @summary Get baskets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaskets(options) {
            return exports.BasketsApiFp(configuration).getBaskets(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a basket by it\'s ID
         * @summary Get basket
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsBasketId(basketId, options) {
            return exports.BasketsApiFp(configuration).getBasketsBasketId(basketId, options).then((request) => request(axios, basePath));
        },
        /**
         * This request will get the current active basket for a user
         * @summary Get the current basket for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsCurrent(options) {
            return exports.BasketsApiFp(configuration).getBasketsCurrent(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an authenticatd users saved baskets.
         * @summary Get a users saved baskets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketsSaved(options) {
            return exports.BasketsApiFp(configuration).getBasketsSaved(options).then((request) => request(axios, basePath));
        },
        /**
         * Add lines to a basket
         * @summary Create basket lines
         * @param {CreateBasketLinesBody} [createBasketLinesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketLines(createBasketLinesBody, options) {
            return exports.BasketsApiFp(configuration).postBasketLines(createBasketLinesBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create Basket
         * @param {CreateBasketBody} [createBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBaskets(createBasketBody, options) {
            return exports.BasketsApiFp(configuration).postBaskets(createBasketBody, options).then((request) => request(axios, basePath));
        },
        /**
         * A user is able to \"claim\" a guest basket.
         * @summary Allow a user to claim a basket
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdClaim(basketId, options) {
            return exports.BasketsApiFp(configuration).postBasketsBasketIdClaim(basketId, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows you to add custom meta information to a basket.
         * @summary Add meta information
         * @param {string} basketId
         * @param {AddBasketMetaBody} [addBasketMetaBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdMeta(basketId, addBasketMetaBody, options) {
            return exports.BasketsApiFp(configuration).postBasketsBasketIdMeta(basketId, addBasketMetaBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Saves a basket to a users account.
         * @summary Save a basket for a user
         * @param {string} basketId
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsBasketIdSave(basketId, saveBasketBody, options) {
            return exports.BasketsApiFp(configuration).postBasketsBasketIdSave(basketId, saveBasketBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
         * @summary Resolve a basket
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBasketsResolve(saveBasketBody, options) {
            return exports.BasketsApiFp(configuration).postBasketsResolve(saveBasketBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a basket line based on it\'s ID.
         * @summary Update basket line
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineId(basketLineId, basketLineUpdateBody, options) {
            return exports.BasketsApiFp(configuration).putBasketLinesBasketLineId(basketLineId, basketLineUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update basket line quantity
         * @summary Update basket line quantity
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineIdAdd(basketLineId, basketLineUpdateBody, options) {
            return exports.BasketsApiFp(configuration).putBasketLinesBasketLineIdAdd(basketLineId, basketLineUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes quantity from a basket line
         * @summary Remove basket line quantity
         * @param {string} basketLineId
         * @param {BasketLineUpdateBody} [basketLineUpdateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketLinesBasketLineIdRemove(basketLineId, basketLineUpdateBody, options) {
            return exports.BasketsApiFp(configuration).putBasketLinesBasketLineIdRemove(basketLineId, basketLineUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a basket
         * @summary Update a basket by ID
         * @param {string} basketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketsBasketId(basketId, options) {
            return exports.BasketsApiFp(configuration).putBasketsBasketId(basketId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a saved basket on the API
         * @summary Update a saved basket
         * @param {string} basketId
         * @param {SaveBasketBody} [saveBasketBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBasketsSavedBasketId(basketId, saveBasketBody, options) {
            return exports.BasketsApiFp(configuration).putBasketsSavedBasketId(basketId, saveBasketBody, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BasketsApi - object-oriented interface
 * @export
 * @class BasketsApi
 * @extends {BaseAPI}
 */
class BasketsApi extends base_1.BaseAPI {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketLines(options) {
        return exports.BasketsApiFp(this.configuration).deleteBasketLines(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketsBasketId(basketId, options) {
        return exports.BasketsApiFp(this.configuration).deleteBasketsBasketId(basketId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketsBasketIdDiscounts(basketId, options) {
        return exports.BasketsApiFp(this.configuration).deleteBasketsBasketIdDiscounts(basketId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBaskets(options) {
        return exports.BasketsApiFp(this.configuration).getBaskets(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsBasketId(basketId, options) {
        return exports.BasketsApiFp(this.configuration).getBasketsBasketId(basketId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsCurrent(options) {
        return exports.BasketsApiFp(this.configuration).getBasketsCurrent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsSaved(options) {
        return exports.BasketsApiFp(this.configuration).getBasketsSaved(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketLines(createBasketLinesBody, options) {
        return exports.BasketsApiFp(this.configuration).postBasketLines(createBasketLinesBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBaskets(createBasketBody, options) {
        return exports.BasketsApiFp(this.configuration).postBaskets(createBasketBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdClaim(basketId, options) {
        return exports.BasketsApiFp(this.configuration).postBasketsBasketIdClaim(basketId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdMeta(basketId, addBasketMetaBody, options) {
        return exports.BasketsApiFp(this.configuration).postBasketsBasketIdMeta(basketId, addBasketMetaBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdSave(basketId, saveBasketBody, options) {
        return exports.BasketsApiFp(this.configuration).postBasketsBasketIdSave(basketId, saveBasketBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsResolve(saveBasketBody, options) {
        return exports.BasketsApiFp(this.configuration).postBasketsResolve(saveBasketBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineId(basketLineId, basketLineUpdateBody, options) {
        return exports.BasketsApiFp(this.configuration).putBasketLinesBasketLineId(basketLineId, basketLineUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineIdAdd(basketLineId, basketLineUpdateBody, options) {
        return exports.BasketsApiFp(this.configuration).putBasketLinesBasketLineIdAdd(basketLineId, basketLineUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineIdRemove(basketLineId, basketLineUpdateBody, options) {
        return exports.BasketsApiFp(this.configuration).putBasketLinesBasketLineIdRemove(basketLineId, basketLineUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketsBasketId(basketId, options) {
        return exports.BasketsApiFp(this.configuration).putBasketsBasketId(basketId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketsSavedBasketId(basketId, saveBasketBody, options) {
        return exports.BasketsApiFp(this.configuration).putBasketsSavedBasketId(basketId, saveBasketBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BasketsApi = BasketsApi;
