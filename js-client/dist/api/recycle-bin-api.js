"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecycleBinApi = exports.RecycleBinApiFactory = exports.RecycleBinApiFp = exports.RecycleBinApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * RecycleBinApi - axios parameter creator
 * @export
 */
exports.RecycleBinApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
         * @summary Delete item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecycleBinItemId: (itemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling deleteRecycleBinItemId.');
            }
            const localVarPath = `/recycle-bin/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a paginated list of all recycle bin items.
         * @summary Get records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBin: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/recycle-bin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a recycle bin item.
         * @summary Get item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBinItemId: (itemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling getRecycleBinItemId.');
            }
            const localVarPath = `/recycle-bin/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RecycleBinApi - functional programming interface
 * @export
 */
exports.RecycleBinApiFp = function (configuration) {
    return {
        /**
         * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
         * @summary Delete item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecycleBinItemId(itemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RecycleBinApiAxiosParamCreator(configuration).deleteRecycleBinItemId(itemId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a paginated list of all recycle bin items.
         * @summary Get records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBin(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RecycleBinApiAxiosParamCreator(configuration).getRecycleBin(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Retrieves a recycle bin item.
         * @summary Get item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBinItemId(itemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RecycleBinApiAxiosParamCreator(configuration).getRecycleBinItemId(itemId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * RecycleBinApi - factory interface
 * @export
 */
exports.RecycleBinApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
         * @summary Delete item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecycleBinItemId(itemId, options) {
            return exports.RecycleBinApiFp(configuration).deleteRecycleBinItemId(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of all recycle bin items.
         * @summary Get records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBin(options) {
            return exports.RecycleBinApiFp(configuration).getRecycleBin(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a recycle bin item.
         * @summary Get item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBinItemId(itemId, options) {
            return exports.RecycleBinApiFp(configuration).getRecycleBinItemId(itemId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RecycleBinApi - object-oriented interface
 * @export
 * @class RecycleBinApi
 * @extends {BaseAPI}
 */
class RecycleBinApi extends base_1.BaseAPI {
    /**
     * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
     * @summary Delete item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    deleteRecycleBinItemId(itemId, options) {
        return exports.RecycleBinApiFp(this.configuration).deleteRecycleBinItemId(itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a paginated list of all recycle bin items.
     * @summary Get records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    getRecycleBin(options) {
        return exports.RecycleBinApiFp(this.configuration).getRecycleBin(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a recycle bin item.
     * @summary Get item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    getRecycleBinItemId(itemId, options) {
        return exports.RecycleBinApiFp(this.configuration).getRecycleBinItemId(itemId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RecycleBinApi = RecycleBinApi;
