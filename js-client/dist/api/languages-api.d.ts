/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Language } from '../models';
import { LanguageCollection } from '../models';
import { LanguageResponse } from '../models';
/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export declare const LanguagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguagesLanguageId: (languageId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages: (options?: any) => Promise<RequestArgs>;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguagesLanguageId: (languageId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new language
     * @summary Create Language
     * @param {string} name
     * @param {string} lang
     * @param {string} iso Unique
     * @param {boolean} [enabled]
     * @param {boolean} [_default]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLanguages: (name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putLanguagesLanguageId: (languageId: string, language?: Language, options?: any) => Promise<RequestArgs>;
};
/**
 * LanguagesApi - functional programming interface
 * @export
 */
export declare const LanguagesApiFp: (configuration?: Configuration) => {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguagesLanguageId(languageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageCollection>>;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguagesLanguageId(languageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>>;
    /**
     * Create a new language
     * @summary Create Language
     * @param {string} name
     * @param {string} lang
     * @param {string} iso Unique
     * @param {boolean} [enabled]
     * @param {boolean} [_default]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLanguages(name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>>;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putLanguagesLanguageId(languageId: string, language?: Language, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>>;
};
/**
 * LanguagesApi - factory interface
 * @export
 */
export declare const LanguagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages(options?: any): AxiosPromise<LanguageCollection>;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<LanguageResponse>;
    /**
     * Create a new language
     * @summary Create Language
     * @param {string} name
     * @param {string} lang
     * @param {string} iso Unique
     * @param {boolean} [enabled]
     * @param {boolean} [_default]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLanguages(name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options?: any): AxiosPromise<LanguageResponse>;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putLanguagesLanguageId(languageId: string, language?: Language, options?: any): AxiosPromise<LanguageResponse>;
};
/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export declare class LanguagesApi extends BaseAPI {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    deleteLanguagesLanguageId(languageId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    getLanguages(options?: any): Promise<import("axios").AxiosResponse<LanguageCollection, any>>;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    getLanguagesLanguageId(languageId: string, options?: any): Promise<import("axios").AxiosResponse<LanguageResponse, any>>;
    /**
     * Create a new language
     * @summary Create Language
     * @param {string} name
     * @param {string} lang
     * @param {string} iso Unique
     * @param {boolean} [enabled]
     * @param {boolean} [_default]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    postLanguages(name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options?: any): Promise<import("axios").AxiosResponse<LanguageResponse, any>>;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    putLanguagesLanguageId(languageId: string, language?: Language, options?: any): Promise<import("axios").AxiosResponse<LanguageResponse, any>>;
}
