"use strict";
// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlogFamiliesApi = exports.BlogFamiliesApiFactory = exports.BlogFamiliesApiFp = exports.BlogFamiliesApiAxiosParamCreator = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * BlogFamiliesApi - axios parameter creator
 * @export
 */
exports.BlogFamiliesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sends a request to delete a blog family
         * @summary Delete blog family
         * @param {string} blogFamilyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogFamiliesBlogFamilyId: (blogFamilyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'blogFamilyId' is not null or undefined
            if (blogFamilyId === null || blogFamilyId === undefined) {
                throw new base_1.RequiredError('blogFamilyId', 'Required parameter blogFamilyId was null or undefined when calling deleteBlogFamiliesBlogFamilyId.');
            }
            const localVarPath = `/blog-families/{blogFamilyId}`
                .replace(`{${"blogFamilyId"}}`, encodeURIComponent(String(blogFamilyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a paginated list of all blog families.
         * @summary Get blog families
         * @param {string} [include] Define included relationships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogFamilies: (include, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/blog-families`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a single blog family based on ID.
         * @summary Get a blog family
         * @param {string} blogFamilyId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogFamiliesBlogFamilyId: (blogFamilyId, includes, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'blogFamilyId' is not null or undefined
            if (blogFamilyId === null || blogFamilyId === undefined) {
                throw new base_1.RequiredError('blogFamilyId', 'Required parameter blogFamilyId was null or undefined when calling getBlogFamiliesBlogFamilyId.');
            }
            const localVarPath = `/blog-families/{blogFamilyId}`
                .replace(`{${"blogFamilyId"}}`, encodeURIComponent(String(blogFamilyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new blog family.
         * @summary Create blog family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogFamilies: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/blog-families`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a blog family
         * @summary Update blog family
         * @param {string} blogFamilyId
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogFamiliesBlogFamilyId: (blogFamilyId, inlineObject15, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'blogFamilyId' is not null or undefined
            if (blogFamilyId === null || blogFamilyId === undefined) {
                throw new base_1.RequiredError('blogFamilyId', 'Required parameter blogFamilyId was null or undefined when calling putBlogFamiliesBlogFamilyId.');
            }
            const localVarPath = `/blog-families/{blogFamilyId}`
                .replace(`{${"blogFamilyId"}}`, encodeURIComponent(String(blogFamilyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof inlineObject15 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject15 !== undefined ? inlineObject15 : {}) : (inlineObject15 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BlogFamiliesApi - functional programming interface
 * @export
 */
exports.BlogFamiliesApiFp = function (configuration) {
    return {
        /**
         * Sends a request to delete a blog family
         * @summary Delete blog family
         * @param {string} blogFamilyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogFamiliesBlogFamilyId(blogFamilyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BlogFamiliesApiAxiosParamCreator(configuration).deleteBlogFamiliesBlogFamilyId(blogFamilyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a paginated list of all blog families.
         * @summary Get blog families
         * @param {string} [include] Define included relationships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogFamilies(include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BlogFamiliesApiAxiosParamCreator(configuration).getBlogFamilies(include, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Returns a single blog family based on ID.
         * @summary Get a blog family
         * @param {string} blogFamilyId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogFamiliesBlogFamilyId(blogFamilyId, includes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BlogFamiliesApiAxiosParamCreator(configuration).getBlogFamiliesBlogFamilyId(blogFamilyId, includes, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new blog family.
         * @summary Create blog family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogFamilies(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BlogFamiliesApiAxiosParamCreator(configuration).postBlogFamilies(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update a blog family
         * @summary Update blog family
         * @param {string} blogFamilyId
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogFamiliesBlogFamilyId(blogFamilyId, inlineObject15, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BlogFamiliesApiAxiosParamCreator(configuration).putBlogFamiliesBlogFamilyId(blogFamilyId, inlineObject15, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * BlogFamiliesApi - factory interface
 * @export
 */
exports.BlogFamiliesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sends a request to delete a blog family
         * @summary Delete blog family
         * @param {string} blogFamilyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogFamiliesBlogFamilyId(blogFamilyId, options) {
            return exports.BlogFamiliesApiFp(configuration).deleteBlogFamiliesBlogFamilyId(blogFamilyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of all blog families.
         * @summary Get blog families
         * @param {string} [include] Define included relationships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogFamilies(include, options) {
            return exports.BlogFamiliesApiFp(configuration).getBlogFamilies(include, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single blog family based on ID.
         * @summary Get a blog family
         * @param {string} blogFamilyId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogFamiliesBlogFamilyId(blogFamilyId, includes, options) {
            return exports.BlogFamiliesApiFp(configuration).getBlogFamiliesBlogFamilyId(blogFamilyId, includes, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new blog family.
         * @summary Create blog family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogFamilies(options) {
            return exports.BlogFamiliesApiFp(configuration).postBlogFamilies(options).then((request) => request(axios, basePath));
        },
        /**
         * Update a blog family
         * @summary Update blog family
         * @param {string} blogFamilyId
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogFamiliesBlogFamilyId(blogFamilyId, inlineObject15, options) {
            return exports.BlogFamiliesApiFp(configuration).putBlogFamiliesBlogFamilyId(blogFamilyId, inlineObject15, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BlogFamiliesApi - object-oriented interface
 * @export
 * @class BlogFamiliesApi
 * @extends {BaseAPI}
 */
class BlogFamiliesApi extends base_1.BaseAPI {
    /**
     * Sends a request to delete a blog family
     * @summary Delete blog family
     * @param {string} blogFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    deleteBlogFamiliesBlogFamilyId(blogFamilyId, options) {
        return exports.BlogFamiliesApiFp(this.configuration).deleteBlogFamiliesBlogFamilyId(blogFamilyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a paginated list of all blog families.
     * @summary Get blog families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    getBlogFamilies(include, options) {
        return exports.BlogFamiliesApiFp(this.configuration).getBlogFamilies(include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a single blog family based on ID.
     * @summary Get a blog family
     * @param {string} blogFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    getBlogFamiliesBlogFamilyId(blogFamilyId, includes, options) {
        return exports.BlogFamiliesApiFp(this.configuration).getBlogFamiliesBlogFamilyId(blogFamilyId, includes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new blog family.
     * @summary Create blog family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    postBlogFamilies(options) {
        return exports.BlogFamiliesApiFp(this.configuration).postBlogFamilies(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a blog family
     * @summary Update blog family
     * @param {string} blogFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogFamiliesApi
     */
    putBlogFamiliesBlogFamilyId(blogFamilyId, inlineObject15, options) {
        return exports.BlogFamiliesApiFp(this.configuration).putBlogFamiliesBlogFamilyId(blogFamilyId, inlineObject15, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BlogFamiliesApi = BlogFamiliesApi;
