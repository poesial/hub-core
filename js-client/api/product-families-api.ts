// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { InlineObject15 } from '../models';
// @ts-ignore
import { ProductFamilyCollection } from '../models';
// @ts-ignore
import { ProductFamilyResponse } from '../models';
// @ts-ignore
import { Unprocessable } from '../models';
/**
 * ProductFamiliesApi - axios parameter creator
 * @export
 */
export const ProductFamiliesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sends a request to delete a product family
         * @summary Delete product family
         * @param {string} productFamilyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductFamiliesProductFamilyId: async (productFamilyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productFamilyId' is not null or undefined
            if (productFamilyId === null || productFamilyId === undefined) {
                throw new RequiredError('productFamilyId','Required parameter productFamilyId was null or undefined when calling deleteProductFamiliesProductFamilyId.');
            }
            const localVarPath = `/product-families/{productFamilyId}`
                .replace(`{${"productFamilyId"}}`, encodeURIComponent(String(productFamilyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of all product families.
         * @summary Get product families
         * @param {string} [include] Define included relationships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductFamilies: async (include?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-families`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single product family based on ID.
         * @summary Get a product family
         * @param {string} productFamilyId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductFamiliesProductFamilyId: async (productFamilyId: string, includes?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productFamilyId' is not null or undefined
            if (productFamilyId === null || productFamilyId === undefined) {
                throw new RequiredError('productFamilyId','Required parameter productFamilyId was null or undefined when calling getProductFamiliesProductFamilyId.');
            }
            const localVarPath = `/product-families/{productFamilyId}`
                .replace(`{${"productFamilyId"}}`, encodeURIComponent(String(productFamilyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new product family.
         * @summary Create product family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductFamilies: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-families`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a product family
         * @summary Update product family
         * @param {string} productFamilyId
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductFamiliesProductFamilyId: async (productFamilyId: string, inlineObject15?: InlineObject15, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productFamilyId' is not null or undefined
            if (productFamilyId === null || productFamilyId === undefined) {
                throw new RequiredError('productFamilyId','Required parameter productFamilyId was null or undefined when calling putProductFamiliesProductFamilyId.');
            }
            const localVarPath = `/product-families/{productFamilyId}`
                .replace(`{${"productFamilyId"}}`, encodeURIComponent(String(productFamilyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject15 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject15 !== undefined ? inlineObject15 : {}) : (inlineObject15 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductFamiliesApi - functional programming interface
 * @export
 */
export const ProductFamiliesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sends a request to delete a product family
         * @summary Delete product family
         * @param {string} productFamilyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProductFamiliesApiAxiosParamCreator(configuration).deleteProductFamiliesProductFamilyId(productFamilyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated list of all product families.
         * @summary Get product families
         * @param {string} [include] Define included relationships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductFamilies(include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyCollection>> {
            const localVarAxiosArgs = await ProductFamiliesApiAxiosParamCreator(configuration).getProductFamilies(include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single product family based on ID.
         * @summary Get a product family
         * @param {string} productFamilyId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>> {
            const localVarAxiosArgs = await ProductFamiliesApiAxiosParamCreator(configuration).getProductFamiliesProductFamilyId(productFamilyId, includes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new product family.
         * @summary Create product family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProductFamilies(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>> {
            const localVarAxiosArgs = await ProductFamiliesApiAxiosParamCreator(configuration).postProductFamilies(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a product family
         * @summary Update product family
         * @param {string} productFamilyId
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject15?: InlineObject15, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>> {
            const localVarAxiosArgs = await ProductFamiliesApiAxiosParamCreator(configuration).putProductFamiliesProductFamilyId(productFamilyId, inlineObject15, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductFamiliesApi - factory interface
 * @export
 */
export const ProductFamiliesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sends a request to delete a product family
         * @summary Delete product family
         * @param {string} productFamilyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): AxiosPromise<void> {
            return ProductFamiliesApiFp(configuration).deleteProductFamiliesProductFamilyId(productFamilyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of all product families.
         * @summary Get product families
         * @param {string} [include] Define included relationships
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductFamilies(include?: string, options?: any): AxiosPromise<ProductFamilyCollection> {
            return ProductFamiliesApiFp(configuration).getProductFamilies(include, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single product family based on ID.
         * @summary Get a product family
         * @param {string} productFamilyId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): AxiosPromise<ProductFamilyResponse> {
            return ProductFamiliesApiFp(configuration).getProductFamiliesProductFamilyId(productFamilyId, includes, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new product family.
         * @summary Create product family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductFamilies(options?: any): AxiosPromise<ProductFamilyResponse> {
            return ProductFamiliesApiFp(configuration).postProductFamilies(options).then((request) => request(axios, basePath));
        },
        /**
         * Update a product family
         * @summary Update product family
         * @param {string} productFamilyId
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject15?: InlineObject15, options?: any): AxiosPromise<ProductFamilyResponse> {
            return ProductFamiliesApiFp(configuration).putProductFamiliesProductFamilyId(productFamilyId, inlineObject15, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductFamiliesApi - object-oriented interface
 * @export
 * @class ProductFamiliesApi
 * @extends {BaseAPI}
 */
export class ProductFamiliesApi extends BaseAPI {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    public deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any) {
        return ProductFamiliesApiFp(this.configuration).deleteProductFamiliesProductFamilyId(productFamilyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [include] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    public getProductFamilies(include?: string, options?: any) {
        return ProductFamiliesApiFp(this.configuration).getProductFamilies(include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    public getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any) {
        return ProductFamiliesApiFp(this.configuration).getProductFamiliesProductFamilyId(productFamilyId, includes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    public postProductFamilies(options?: any) {
        return ProductFamiliesApiFp(this.configuration).postProductFamilies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    public putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject15?: InlineObject15, options?: any) {
        return ProductFamiliesApiFp(this.configuration).putProductFamiliesProductFamilyId(productFamilyId, inlineObject15, options).then((request) => request(this.axios, this.basePath));
    }

}
