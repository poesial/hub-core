// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { InlineObject14 } from '../models';
// @ts-ignore
import { OrderResponse } from '../models';
// @ts-ignore
import { PaymentProviderResponse } from '../models';
// @ts-ignore
import { PaymentTypeCollection } from '../models';
// @ts-ignore
import { TransactionResponse } from '../models';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a payment provider from the given handle
         * @summary Get Payment Provider by it\'s handle
         * @param {string} handle
         * @param {string} [orderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentProvider: async (handle: string, orderId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'handle' is not null or undefined
            if (handle === null || handle === undefined) {
                throw new RequiredError('handle','Required parameter handle was null or undefined when calling getPaymentProvider.');
            }
            const localVarPath = `/payments/providers/{handle}`
                .replace(`{${"handle"}}`, encodeURIComponent(String(handle)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the default, configured payment provider.
         * @summary Get Payment Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsProvider: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments/provider`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of available Payment Types in the system
         * @summary Payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
         * @summary Threed Secure Payment
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPayments3dSecure: async (inlineObject14?: InlineObject14, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments/3d-secure`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject14 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject14 !== undefined ? inlineObject14 : {}) : (inlineObject14 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refund a transaction
         * @summary Refund a payment
         * @param {string} transactionId
         * @param {number} [amount] If left blank, the full amount will be refunded
         * @param {string} [notes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsIdRefund: async (transactionId: string, amount?: number, notes?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId','Required parameter transactionId was null or undefined when calling postPaymentsIdRefund.');
            }
            const localVarPath = `/payments/{transactionId}/refund`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (amount !== undefined) {
                localVarFormParams.append('amount', amount as any);
            }

            if (notes !== undefined) {
                localVarFormParams.append('notes', notes as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Voids a payment in the system.
         * @summary Void a payment
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsTransactionIdVoid: async (transactionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId','Required parameter transactionId was null or undefined when calling postPaymentsTransactionIdVoid.');
            }
            const localVarPath = `/payments/{transactionId}/void`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets a payment provider from the given handle
         * @summary Get Payment Provider by it\'s handle
         * @param {string} handle
         * @param {string} [orderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentProvider(handle: string, orderId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentProviderResponse>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getPaymentProvider(handle, orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the default, configured payment provider.
         * @summary Get Payment Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentsProvider(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentProviderResponse>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getPaymentsProvider(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of available Payment Types in the system
         * @summary Payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentsTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentTypeCollection>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getPaymentsTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
         * @summary Threed Secure Payment
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPayments3dSecure(inlineObject14?: InlineObject14, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).postPayments3dSecure(inlineObject14, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Refund a transaction
         * @summary Refund a payment
         * @param {string} transactionId
         * @param {number} [amount] If left blank, the full amount will be refunded
         * @param {string} [notes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentsIdRefund(transactionId: string, amount?: number, notes?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).postPaymentsIdRefund(transactionId, amount, notes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Voids a payment in the system.
         * @summary Void a payment
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentsTransactionIdVoid(transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).postPaymentsTransactionIdVoid(transactionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets a payment provider from the given handle
         * @summary Get Payment Provider by it\'s handle
         * @param {string} handle
         * @param {string} [orderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentProvider(handle: string, orderId?: string, options?: any): AxiosPromise<PaymentProviderResponse> {
            return PaymentsApiFp(configuration).getPaymentProvider(handle, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the default, configured payment provider.
         * @summary Get Payment Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsProvider(options?: any): AxiosPromise<PaymentProviderResponse> {
            return PaymentsApiFp(configuration).getPaymentsProvider(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of available Payment Types in the system
         * @summary Payment types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsTypes(options?: any): AxiosPromise<PaymentTypeCollection> {
            return PaymentsApiFp(configuration).getPaymentsTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
         * @summary Threed Secure Payment
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPayments3dSecure(inlineObject14?: InlineObject14, options?: any): AxiosPromise<OrderResponse> {
            return PaymentsApiFp(configuration).postPayments3dSecure(inlineObject14, options).then((request) => request(axios, basePath));
        },
        /**
         * Refund a transaction
         * @summary Refund a payment
         * @param {string} transactionId
         * @param {number} [amount] If left blank, the full amount will be refunded
         * @param {string} [notes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsIdRefund(transactionId: string, amount?: number, notes?: string, options?: any): AxiosPromise<TransactionResponse> {
            return PaymentsApiFp(configuration).postPaymentsIdRefund(transactionId, amount, notes, options).then((request) => request(axios, basePath));
        },
        /**
         * Voids a payment in the system.
         * @summary Void a payment
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentsTransactionIdVoid(transactionId: string, options?: any): AxiosPromise<TransactionResponse> {
            return PaymentsApiFp(configuration).postPaymentsTransactionIdVoid(transactionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * Gets a payment provider from the given handle
     * @summary Get Payment Provider by it\'s handle
     * @param {string} handle
     * @param {string} [orderId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public getPaymentProvider(handle: string, orderId?: string, options?: any) {
        return PaymentsApiFp(this.configuration).getPaymentProvider(handle, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the default, configured payment provider.
     * @summary Get Payment Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public getPaymentsProvider(options?: any) {
        return PaymentsApiFp(this.configuration).getPaymentsProvider(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of available Payment Types in the system
     * @summary Payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public getPaymentsTypes(options?: any) {
        return PaymentsApiFp(this.configuration).getPaymentsTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
     * @summary Threed Secure Payment
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public postPayments3dSecure(inlineObject14?: InlineObject14, options?: any) {
        return PaymentsApiFp(this.configuration).postPayments3dSecure(inlineObject14, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refund a transaction
     * @summary Refund a payment
     * @param {string} transactionId
     * @param {number} [amount] If left blank, the full amount will be refunded
     * @param {string} [notes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public postPaymentsIdRefund(transactionId: string, amount?: number, notes?: string, options?: any) {
        return PaymentsApiFp(this.configuration).postPaymentsIdRefund(transactionId, amount, notes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Voids a payment in the system.
     * @summary Void a payment
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public postPaymentsTransactionIdVoid(transactionId: string, options?: any) {
        return PaymentsApiFp(this.configuration).postPaymentsTransactionIdVoid(transactionId, options).then((request) => request(this.axios, this.basePath));
    }

}
