// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { InlineObject35 } from '../models';
// @ts-ignore
import { InlineObject36 } from '../models';
// @ts-ignore
import { InlineResponse42212 } from '../models';
// @ts-ignore
import { TaxCollection } from '../models';
// @ts-ignore
import { TaxResponse } from '../models';
// @ts-ignore
import { Unauthenticated } from '../models';
/**
 * TaxesApi - axios parameter creator
 * @export
 */
export const TaxesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a tax record by it\'s ID.
         * @summary Delete tax record
         * @param {string} taxId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxesTaxId: async (taxId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxId' is not null or undefined
            if (taxId === null || taxId === undefined) {
                throw new RequiredError('taxId','Required parameter taxId was null or undefined when calling deleteTaxesTaxId.');
            }
            const localVarPath = `/taxes/{taxId}`
                .replace(`{${"taxId"}}`, encodeURIComponent(String(taxId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of taxes
         * @summary Get taxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/taxes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tax record by it\'s ID
         * @summary Get tax record
         * @param {string} taxId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxesTaxId: async (taxId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxId' is not null or undefined
            if (taxId === null || taxId === undefined) {
                throw new RequiredError('taxId','Required parameter taxId was null or undefined when calling getTaxesTaxId.');
            }
            const localVarPath = `/taxes/{taxId}`
                .replace(`{${"taxId"}}`, encodeURIComponent(String(taxId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new tax resource.
         * @summary Create tax
         * @param {InlineObject35} [inlineObject35]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaxes: async (inlineObject35?: InlineObject35, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/taxes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject35 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject35 !== undefined ? inlineObject35 : {}) : (inlineObject35 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a tax record by it\'s ID
         * @summary Update tax record
         * @param {string} taxId
         * @param {InlineObject36} [inlineObject36]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaxesTaxId: async (taxId: string, inlineObject36?: InlineObject36, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxId' is not null or undefined
            if (taxId === null || taxId === undefined) {
                throw new RequiredError('taxId','Required parameter taxId was null or undefined when calling putTaxesTaxId.');
            }
            const localVarPath = `/taxes/{taxId}`
                .replace(`{${"taxId"}}`, encodeURIComponent(String(taxId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject36 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject36 !== undefined ? inlineObject36 : {}) : (inlineObject36 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxesApi - functional programming interface
 * @export
 */
export const TaxesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a tax record by it\'s ID.
         * @summary Delete tax record
         * @param {string} taxId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaxesTaxId(taxId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TaxesApiAxiosParamCreator(configuration).deleteTaxesTaxId(taxId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a paginated list of taxes
         * @summary Get taxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaxes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxCollection>> {
            const localVarAxiosArgs = await TaxesApiAxiosParamCreator(configuration).getTaxes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a tax record by it\'s ID
         * @summary Get tax record
         * @param {string} taxId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaxesTaxId(taxId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxResponse>> {
            const localVarAxiosArgs = await TaxesApiAxiosParamCreator(configuration).getTaxesTaxId(taxId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new tax resource.
         * @summary Create tax
         * @param {InlineObject35} [inlineObject35]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTaxes(inlineObject35?: InlineObject35, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxResponse>> {
            const localVarAxiosArgs = await TaxesApiAxiosParamCreator(configuration).postTaxes(inlineObject35, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a tax record by it\'s ID
         * @summary Update tax record
         * @param {string} taxId
         * @param {InlineObject36} [inlineObject36]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTaxesTaxId(taxId: string, inlineObject36?: InlineObject36, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxResponse>> {
            const localVarAxiosArgs = await TaxesApiAxiosParamCreator(configuration).putTaxesTaxId(taxId, inlineObject36, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaxesApi - factory interface
 * @export
 */
export const TaxesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a tax record by it\'s ID.
         * @summary Delete tax record
         * @param {string} taxId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxesTaxId(taxId: string, options?: any): AxiosPromise<void> {
            return TaxesApiFp(configuration).deleteTaxesTaxId(taxId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of taxes
         * @summary Get taxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxes(options?: any): AxiosPromise<TaxCollection> {
            return TaxesApiFp(configuration).getTaxes(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tax record by it\'s ID
         * @summary Get tax record
         * @param {string} taxId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxesTaxId(taxId: string, options?: any): AxiosPromise<TaxResponse> {
            return TaxesApiFp(configuration).getTaxesTaxId(taxId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new tax resource.
         * @summary Create tax
         * @param {InlineObject35} [inlineObject35]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaxes(inlineObject35?: InlineObject35, options?: any): AxiosPromise<TaxResponse> {
            return TaxesApiFp(configuration).postTaxes(inlineObject35, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a tax record by it\'s ID
         * @summary Update tax record
         * @param {string} taxId
         * @param {InlineObject36} [inlineObject36]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTaxesTaxId(taxId: string, inlineObject36?: InlineObject36, options?: any): AxiosPromise<TaxResponse> {
            return TaxesApiFp(configuration).putTaxesTaxId(taxId, inlineObject36, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxesApi - object-oriented interface
 * @export
 * @class TaxesApi
 * @extends {BaseAPI}
 */
export class TaxesApi extends BaseAPI {
    /**
     * Delete a tax record by it\'s ID.
     * @summary Delete tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public deleteTaxesTaxId(taxId: string, options?: any) {
        return TaxesApiFp(this.configuration).deleteTaxesTaxId(taxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of taxes
     * @summary Get taxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public getTaxes(options?: any) {
        return TaxesApiFp(this.configuration).getTaxes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tax record by it\'s ID
     * @summary Get tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public getTaxesTaxId(taxId: string, options?: any) {
        return TaxesApiFp(this.configuration).getTaxesTaxId(taxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new tax resource.
     * @summary Create tax
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public postTaxes(inlineObject35?: InlineObject35, options?: any) {
        return TaxesApiFp(this.configuration).postTaxes(inlineObject35, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a tax record by it\'s ID
     * @summary Update tax record
     * @param {string} taxId
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public putTaxesTaxId(taxId: string, inlineObject36?: InlineObject36, options?: any) {
        return TaxesApiFp(this.configuration).putTaxesTaxId(taxId, inlineObject36, options).then((request) => request(this.axios, this.basePath));
    }

}
