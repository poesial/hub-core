// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { Content } from '../models';
// @ts-ignore
import { ContentResponse } from '../models';
// @ts-ignore
import { UpdateContentBody } from '../models';
/**
 * ContentsApi - axios parameter creator
 * @export
 */
export const ContentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get the content resource
     * @param {string} contentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContentById: async (contentId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'contentId' is not null or undefined
      if (contentId === null || contentId === undefined) {
        throw new RequiredError('contentId','Required parameter contentId was null or undefined when calling getContentById.');
      }
      const localVarPath = `/contents/{contentId}`
        .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the content resource
     * @param {string} contentId
     * @param {UpdateContentBody} [updateContentBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putContentsContentId: async (contentId: string, updateContentBody?: UpdateContentBody, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'contentId' is not null or undefined
      if (contentId === null || contentId === undefined) {
        throw new RequiredError('contentId','Required parameter contentId was null or undefined when calling putContentsContentId.');
      }
      const localVarPath = `/contents/{contentId}`
        .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const needsSerialization = (typeof updateContentBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateContentBody !== undefined ? updateContentBody : {}) : (updateContentBody || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * ContentsApiFp - functional programming interface
 * @export
 */
export const ContentsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get the content resource
     * @param {string} contentId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContentById(contentId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentResponse>> {
      const localVarAxiosArgs = await ContentsApiAxiosParamCreator(configuration).getContentById(contentId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update the content resource
     * @param {string} contentId
     * @param {UpdateContentBody} [updateContentBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putContentsContentId(contentId: string, updateContentBody?: UpdateContentBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentResponse>> {
      const localVarAxiosArgs = await ContentsApiAxiosParamCreator(configuration).putContentsContentId(contentId, updateContentBody, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * ContentsApi - factory interface
 * @export
 */
export const ContentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Get the content resource
     * @param {string} contentId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContentById(contentId: string, include?: string, options?: any): AxiosPromise<ContentResponse> {
      return ContentsApiFp(configuration).getContentById(contentId, include, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the content resource
     * @param {string} contentId
     * @param {UpdateContentBody} [updateContentBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putContentsContentId(contentId: string, updateContentBody?: UpdateContentBody, options?: any): AxiosPromise<ContentResponse> {
      return ContentsApiFp(configuration).putContentsContentId(contentId, updateContentBody, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ContentsApi - object-oriented interface
 * @export
 * @class ContentsApi
 * @extends {BaseAPI}
 */
export class ContentsApi extends BaseAPI {
  /**
   *
   * @summary Get the content resource
   * @param {string} contentId
   * @param {string} [include]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentsApi
   */
  public getContentById(contentId: string, include?: string, options?: any) {
    return ContentsApiFp(this.configuration).getContentById(contentId, include, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update the content resource
   * @param {string} contentId
   * @param {UpdateContentBody} [updateContentBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentsApi
   */
  public putContentsContentId(contentId: string, updateContentBody?: UpdateContentBody, options?: any) {
    return ContentsApiFp(this.configuration).putContentsContentId(contentId, updateContentBody, options).then((request) => request(this.axios, this.basePath));
  }

}
