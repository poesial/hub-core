// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { Language } from '../models';
// @ts-ignore
import { LanguageCollection } from '../models';
// @ts-ignore
import { LanguageResponse } from '../models';
// @ts-ignore
import { Unprocessable } from '../models';
/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export const LanguagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a Language by its ID
         * @summary Delete Language
         * @param {string} languageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLanguagesLanguageId: async (languageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'languageId' is not null or undefined
            if (languageId === null || languageId === undefined) {
                throw new RequiredError('languageId','Required parameter languageId was null or undefined when calling deleteLanguagesLanguageId.');
            }
            const localVarPath = `/languages/{languageId}`
                .replace(`{${"languageId"}}`, encodeURIComponent(String(languageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of Languages
         * @summary Get Languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguages: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/languages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Language by ID
         * @summary Get Language
         * @param {string} languageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguagesLanguageId: async (languageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'languageId' is not null or undefined
            if (languageId === null || languageId === undefined) {
                throw new RequiredError('languageId','Required parameter languageId was null or undefined when calling getLanguagesLanguageId.');
            }
            const localVarPath = `/languages/{languageId}`
                .replace(`{${"languageId"}}`, encodeURIComponent(String(languageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new language
         * @summary Create Language
         * @param {string} name
         * @param {string} lang
         * @param {string} iso Unique
         * @param {boolean} [enabled]
         * @param {boolean} [_default]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLanguages: async (name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postLanguages.');
            }
            // verify required parameter 'lang' is not null or undefined
            if (lang === null || lang === undefined) {
                throw new RequiredError('lang','Required parameter lang was null or undefined when calling postLanguages.');
            }
            // verify required parameter 'iso' is not null or undefined
            if (iso === null || iso === undefined) {
                throw new RequiredError('iso','Required parameter iso was null or undefined when calling postLanguages.');
            }
            const localVarPath = `/languages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }

            if (lang !== undefined) {
                localVarFormParams.append('lang', lang as any);
            }

            if (iso !== undefined) {
                localVarFormParams.append('iso', iso as any);
            }

            if (enabled !== undefined) {
                localVarFormParams.append('enabled', enabled as any);
            }

            if (_default !== undefined) {
                localVarFormParams.append('default', _default as any);
            }

            if (current !== undefined) {
                localVarFormParams.append('current', current as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Language using it\'s ID
         * @summary Update Language
         * @param {string} languageId
         * @param {Language} [language]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLanguagesLanguageId: async (languageId: string, language?: Language, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'languageId' is not null or undefined
            if (languageId === null || languageId === undefined) {
                throw new RequiredError('languageId','Required parameter languageId was null or undefined when calling putLanguagesLanguageId.');
            }
            const localVarPath = `/languages/{languageId}`
                .replace(`{${"languageId"}}`, encodeURIComponent(String(languageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof language !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(language !== undefined ? language : {}) : (language || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanguagesApi - functional programming interface
 * @export
 */
export const LanguagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a Language by its ID
         * @summary Delete Language
         * @param {string} languageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLanguagesLanguageId(languageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LanguagesApiAxiosParamCreator(configuration).deleteLanguagesLanguageId(languageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated list of Languages
         * @summary Get Languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLanguages(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageCollection>> {
            const localVarAxiosArgs = await LanguagesApiAxiosParamCreator(configuration).getLanguages(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a Language by ID
         * @summary Get Language
         * @param {string} languageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLanguagesLanguageId(languageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>> {
            const localVarAxiosArgs = await LanguagesApiAxiosParamCreator(configuration).getLanguagesLanguageId(languageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new language
         * @summary Create Language
         * @param {string} name
         * @param {string} lang
         * @param {string} iso Unique
         * @param {boolean} [enabled]
         * @param {boolean} [_default]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLanguages(name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>> {
            const localVarAxiosArgs = await LanguagesApiAxiosParamCreator(configuration).postLanguages(name, lang, iso, enabled, _default, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Language using it\'s ID
         * @summary Update Language
         * @param {string} languageId
         * @param {Language} [language]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLanguagesLanguageId(languageId: string, language?: Language, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>> {
            const localVarAxiosArgs = await LanguagesApiAxiosParamCreator(configuration).putLanguagesLanguageId(languageId, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LanguagesApi - factory interface
 * @export
 */
export const LanguagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a Language by its ID
         * @summary Delete Language
         * @param {string} languageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<void> {
            return LanguagesApiFp(configuration).deleteLanguagesLanguageId(languageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of Languages
         * @summary Get Languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguages(options?: any): AxiosPromise<LanguageCollection> {
            return LanguagesApiFp(configuration).getLanguages(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Language by ID
         * @summary Get Language
         * @param {string} languageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<LanguageResponse> {
            return LanguagesApiFp(configuration).getLanguagesLanguageId(languageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new language
         * @summary Create Language
         * @param {string} name
         * @param {string} lang
         * @param {string} iso Unique
         * @param {boolean} [enabled]
         * @param {boolean} [_default]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLanguages(name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options?: any): AxiosPromise<LanguageResponse> {
            return LanguagesApiFp(configuration).postLanguages(name, lang, iso, enabled, _default, current, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Language using it\'s ID
         * @summary Update Language
         * @param {string} languageId
         * @param {Language} [language]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLanguagesLanguageId(languageId: string, language?: Language, options?: any): AxiosPromise<LanguageResponse> {
            return LanguagesApiFp(configuration).putLanguagesLanguageId(languageId, language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export class LanguagesApi extends BaseAPI {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public deleteLanguagesLanguageId(languageId: string, options?: any) {
        return LanguagesApiFp(this.configuration).deleteLanguagesLanguageId(languageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public getLanguages(options?: any) {
        return LanguagesApiFp(this.configuration).getLanguages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public getLanguagesLanguageId(languageId: string, options?: any) {
        return LanguagesApiFp(this.configuration).getLanguagesLanguageId(languageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new language
     * @summary Create Language
     * @param {string} name
     * @param {string} lang
     * @param {string} iso Unique
     * @param {boolean} [enabled]
     * @param {boolean} [_default]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public postLanguages(name: string, lang: string, iso: string, enabled?: boolean, _default?: boolean, current?: boolean, options?: any) {
        return LanguagesApiFp(this.configuration).postLanguages(name, lang, iso, enabled, _default, current, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public putLanguagesLanguageId(languageId: string, language?: Language, options?: any) {
        return LanguagesApiFp(this.configuration).putLanguagesLanguageId(languageId, language, options).then((request) => request(this.axios, this.basePath));
    }

}
