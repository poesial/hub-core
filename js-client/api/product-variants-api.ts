// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { InlineObject16 } from '../models';
// @ts-ignore
import { ProductVariantCollection } from '../models';
// @ts-ignore
import { ProductVariantResponse } from '../models';
// @ts-ignore
import { ProductVariantsCreateBody } from '../models';
/**
 * ProductVariantsApi - axios parameter creator
 * @export
 */
export const ProductVariantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a product variant by it\'s ID
         * @summary Delete a Product Variant
         * @param {string} productVariantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductVariant: async (productVariantId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productVariantId' is not null or undefined
            if (productVariantId === null || productVariantId === undefined) {
                throw new RequiredError('productVariantId','Required parameter productVariantId was null or undefined when calling deleteProductVariant.');
            }
            const localVarPath = `/products/variants/{productVariantId}`
                .replace(`{${"productVariantId"}}`, encodeURIComponent(String(productVariantId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of all product variants in the system
         * @summary Get Product Variants
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsVariants: async (include?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/variants`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a product variant by it\'s ID
         * @summary Get Product Variant
         * @param {string} productVariantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsVariantsProductVariantId: async (productVariantId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productVariantId' is not null or undefined
            if (productVariantId === null || productVariantId === undefined) {
                throw new RequiredError('productVariantId','Required parameter productVariantId was null or undefined when calling getProductsVariantsProductVariantId.');
            }
            const localVarPath = `/products/variants/{productVariantId}`
                .replace(`{${"productVariantId"}}`, encodeURIComponent(String(productVariantId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create product variants
         * @summary Post Product Variants
         * @param {string} productId
         * @param {string} [include]
         * @param {ProductVariantsCreateBody} [productVariantsCreateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductVariants: async (productId: string, include?: string, productVariantsCreateBody?: ProductVariantsCreateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling postProductVariants.');
            }
            const localVarPath = `/products/{productId}/variants`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof productVariantsCreateBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productVariantsCreateBody !== undefined ? productVariantsCreateBody : {}) : (productVariantsCreateBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request to update a product variants inventory.
         * @summary Update ProductVariant Inventory
         * @param {string} productVariantId
         * @param {InlineObject16} [inlineObject16]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductsVariantsProductVariantIdInventory: async (productVariantId: string, inlineObject16?: InlineObject16, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productVariantId' is not null or undefined
            if (productVariantId === null || productVariantId === undefined) {
                throw new RequiredError('productVariantId','Required parameter productVariantId was null or undefined when calling putProductsVariantsProductVariantIdInventory.');
            }
            const localVarPath = `/products/variants/{productVariantId}/inventory`
                .replace(`{${"productVariantId"}}`, encodeURIComponent(String(productVariantId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject16 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject16 !== undefined ? inlineObject16 : {}) : (inlineObject16 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductVariantsApi - functional programming interface
 * @export
 */
export const ProductVariantsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a product variant by it\'s ID
         * @summary Delete a Product Variant
         * @param {string} productVariantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductVariant(productVariantId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).deleteProductVariant(productVariantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a paginated list of all product variants in the system
         * @summary Get Product Variants
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsVariants(include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantCollection>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).getProductsVariants(include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a product variant by it\'s ID
         * @summary Get Product Variant
         * @param {string} productVariantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsVariantsProductVariantId(productVariantId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantResponse>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).getProductsVariantsProductVariantId(productVariantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create product variants
         * @summary Post Product Variants
         * @param {string} productId
         * @param {string} [include]
         * @param {ProductVariantsCreateBody} [productVariantsCreateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProductVariants(productId: string, include?: string, productVariantsCreateBody?: ProductVariantsCreateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantCollection>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).postProductVariants(productId, include, productVariantsCreateBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Request to update a product variants inventory.
         * @summary Update ProductVariant Inventory
         * @param {string} productVariantId
         * @param {InlineObject16} [inlineObject16]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProductsVariantsProductVariantIdInventory(productVariantId: string, inlineObject16?: InlineObject16, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantResponse>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).putProductsVariantsProductVariantIdInventory(productVariantId, inlineObject16, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductVariantsApi - factory interface
 * @export
 */
export const ProductVariantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a product variant by it\'s ID
         * @summary Delete a Product Variant
         * @param {string} productVariantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductVariant(productVariantId: string, options?: any): AxiosPromise<void> {
            return ProductVariantsApiFp(configuration).deleteProductVariant(productVariantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of all product variants in the system
         * @summary Get Product Variants
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsVariants(include?: string, options?: any): AxiosPromise<ProductVariantCollection> {
            return ProductVariantsApiFp(configuration).getProductsVariants(include, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a product variant by it\'s ID
         * @summary Get Product Variant
         * @param {string} productVariantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsVariantsProductVariantId(productVariantId: string, options?: any): AxiosPromise<ProductVariantResponse> {
            return ProductVariantsApiFp(configuration).getProductsVariantsProductVariantId(productVariantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create product variants
         * @summary Post Product Variants
         * @param {string} productId
         * @param {string} [include]
         * @param {ProductVariantsCreateBody} [productVariantsCreateBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductVariants(productId: string, include?: string, productVariantsCreateBody?: ProductVariantsCreateBody, options?: any): AxiosPromise<ProductVariantCollection> {
            return ProductVariantsApiFp(configuration).postProductVariants(productId, include, productVariantsCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Request to update a product variants inventory.
         * @summary Update ProductVariant Inventory
         * @param {string} productVariantId
         * @param {InlineObject16} [inlineObject16]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductsVariantsProductVariantIdInventory(productVariantId: string, inlineObject16?: InlineObject16, options?: any): AxiosPromise<ProductVariantResponse> {
            return ProductVariantsApiFp(configuration).putProductsVariantsProductVariantIdInventory(productVariantId, inlineObject16, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductVariantsApi - object-oriented interface
 * @export
 * @class ProductVariantsApi
 * @extends {BaseAPI}
 */
export class ProductVariantsApi extends BaseAPI {
    /**
     * Delete a product variant by it\'s ID
     * @summary Delete a Product Variant
     * @param {string} productVariantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public deleteProductVariant(productVariantId: string, options?: any) {
        return ProductVariantsApiFp(this.configuration).deleteProductVariant(productVariantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of all product variants in the system
     * @summary Get Product Variants
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public getProductsVariants(include?: string, options?: any) {
        return ProductVariantsApiFp(this.configuration).getProductsVariants(include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a product variant by it\'s ID
     * @summary Get Product Variant
     * @param {string} productVariantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public getProductsVariantsProductVariantId(productVariantId: string, options?: any) {
        return ProductVariantsApiFp(this.configuration).getProductsVariantsProductVariantId(productVariantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create product variants
     * @summary Post Product Variants
     * @param {string} productId
     * @param {string} [include]
     * @param {ProductVariantsCreateBody} [productVariantsCreateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public postProductVariants(productId: string, include?: string, productVariantsCreateBody?: ProductVariantsCreateBody, options?: any) {
        return ProductVariantsApiFp(this.configuration).postProductVariants(productId, include, productVariantsCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request to update a product variants inventory.
     * @summary Update ProductVariant Inventory
     * @param {string} productVariantId
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public putProductsVariantsProductVariantIdInventory(productVariantId: string, inlineObject16?: InlineObject16, options?: any) {
        return ProductVariantsApiFp(this.configuration).putProductsVariantsProductVariantIdInventory(productVariantId, inlineObject16, options).then((request) => request(this.axios, this.basePath));
    }

}
