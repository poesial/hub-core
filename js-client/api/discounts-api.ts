// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { DiscountCollection } from '../models';
// @ts-ignore
import { DiscountResponse } from '../models';
// @ts-ignore
import { InlineObject5 } from '../models';
// @ts-ignore
import { InlineObject6 } from '../models';
/**
 * DiscountsApi - axios parameter creator
 * @export
 */
export const DiscountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a Discount
         * @summary Delete Discount
         * @param {string} discountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscountsDiscountId: async (discountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            if (discountId === null || discountId === undefined) {
                throw new RequiredError('discountId','Required parameter discountId was null or undefined when calling deleteDiscountsDiscountId.');
            }
            const localVarPath = `/discounts/{discountId}`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of Discounts
         * @summary Get Discounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscounts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/discounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Discount by it\'s ID.
         * @summary Get a Discount
         * @param {string} discountId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountsDiscountId: async (discountId: string, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            if (discountId === null || discountId === undefined) {
                throw new RequiredError('discountId','Required parameter discountId was null or undefined when calling getDiscountsDiscountId.');
            }
            const localVarPath = `/discounts/{discountId}`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Discount.
         * @summary Create Discount
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDiscounts: async (inlineObject5?: InlineObject5, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/discounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject5 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {}) : (inlineObject5 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Discount
         * @summary Update Discount
         * @param {string} discountId
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDiscountsDiscountId: async (discountId: string, inlineObject6?: InlineObject6, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            if (discountId === null || discountId === undefined) {
                throw new RequiredError('discountId','Required parameter discountId was null or undefined when calling putDiscountsDiscountId.');
            }
            const localVarPath = `/discounts/{discountId}`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject6 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {}) : (inlineObject6 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscountsApi - functional programming interface
 * @export
 */
export const DiscountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a Discount
         * @summary Delete Discount
         * @param {string} discountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDiscountsDiscountId(discountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DiscountsApiAxiosParamCreator(configuration).deleteDiscountsDiscountId(discountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated list of Discounts
         * @summary Get Discounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountCollection>> {
            const localVarAxiosArgs = await DiscountsApiAxiosParamCreator(configuration).getDiscounts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Discount by it\'s ID.
         * @summary Get a Discount
         * @param {string} discountId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscountsDiscountId(discountId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountResponse>> {
            const localVarAxiosArgs = await DiscountsApiAxiosParamCreator(configuration).getDiscountsDiscountId(discountId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Discount.
         * @summary Create Discount
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDiscounts(inlineObject5?: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountResponse>> {
            const localVarAxiosArgs = await DiscountsApiAxiosParamCreator(configuration).postDiscounts(inlineObject5, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Discount
         * @summary Update Discount
         * @param {string} discountId
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDiscountsDiscountId(discountId: string, inlineObject6?: InlineObject6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountResponse>> {
            const localVarAxiosArgs = await DiscountsApiAxiosParamCreator(configuration).putDiscountsDiscountId(discountId, inlineObject6, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DiscountsApi - factory interface
 * @export
 */
export const DiscountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a Discount
         * @summary Delete Discount
         * @param {string} discountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscountsDiscountId(discountId: string, options?: any): AxiosPromise<void> {
            return DiscountsApiFp(configuration).deleteDiscountsDiscountId(discountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of Discounts
         * @summary Get Discounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscounts(options?: any): AxiosPromise<DiscountCollection> {
            return DiscountsApiFp(configuration).getDiscounts(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Discount by it\'s ID.
         * @summary Get a Discount
         * @param {string} discountId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscountsDiscountId(discountId: string, include?: string, options?: any): AxiosPromise<DiscountResponse> {
            return DiscountsApiFp(configuration).getDiscountsDiscountId(discountId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Discount.
         * @summary Create Discount
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDiscounts(inlineObject5?: InlineObject5, options?: any): AxiosPromise<DiscountResponse> {
            return DiscountsApiFp(configuration).postDiscounts(inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Discount
         * @summary Update Discount
         * @param {string} discountId
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDiscountsDiscountId(discountId: string, inlineObject6?: InlineObject6, options?: any): AxiosPromise<DiscountResponse> {
            return DiscountsApiFp(configuration).putDiscountsDiscountId(discountId, inlineObject6, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiscountsApi - object-oriented interface
 * @export
 * @class DiscountsApi
 * @extends {BaseAPI}
 */
export class DiscountsApi extends BaseAPI {
    /**
     * Deletes a Discount
     * @summary Delete Discount
     * @param {string} discountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    public deleteDiscountsDiscountId(discountId: string, options?: any) {
        return DiscountsApiFp(this.configuration).deleteDiscountsDiscountId(discountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of Discounts
     * @summary Get Discounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    public getDiscounts(options?: any) {
        return DiscountsApiFp(this.configuration).getDiscounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Discount by it\'s ID.
     * @summary Get a Discount
     * @param {string} discountId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    public getDiscountsDiscountId(discountId: string, include?: string, options?: any) {
        return DiscountsApiFp(this.configuration).getDiscountsDiscountId(discountId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Discount.
     * @summary Create Discount
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    public postDiscounts(inlineObject5?: InlineObject5, options?: any) {
        return DiscountsApiFp(this.configuration).postDiscounts(inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Discount
     * @summary Update Discount
     * @param {string} discountId
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    public putDiscountsDiscountId(discountId: string, inlineObject6?: InlineObject6, options?: any) {
        return DiscountsApiFp(this.configuration).putDiscountsDiscountId(discountId, inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

}
