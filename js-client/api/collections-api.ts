// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { CollectionCollection } from '../models';
// @ts-ignore
import { CollectionResponse } from '../models';
// @ts-ignore
import { InlineObject1 } from '../models';
// @ts-ignore
import { InlineObject2 } from '../models';
// @ts-ignore
import { InlineObject3 } from '../models';
// @ts-ignore
import { InlineObject4 } from '../models';
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export const CollectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a Collection by its ID
         * @summary Delete Collection
         * @param {string} collectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollectionsCollectionId: async (collectionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling deleteCollectionsCollectionId.');
            }
            const localVarPath = `/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated response of collections.
         * @summary Get Collections
         * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
         * @param {string} [perPage]
         * @param {string} [fullResponse]
         * @param {string} [sort]
         * @param {string} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollections: async (include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (fullResponse !== undefined) {
                localVarQueryParameter['full_response'] = fullResponse;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single Collection by its ID
         * @summary Single Collection
         * @param {string} collectionId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionsCollectionId: async (collectionId: string, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling getCollectionsCollectionId.');
            }
            const localVarPath = `/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new collection.
         * @summary Create Collection
         * @param {InlineObject3} [inlineObject3]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollections: async (inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject3 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Syncs products with a collection.
         * @summary Update a collection\'s products
         * @param {string} collectionId
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionsCollectionIdProducts: async (collectionId: string, inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling postCollectionsCollectionIdProducts.');
            }
            const localVarPath = `/collections/{collectionId}/products`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This request will allow you to attach routes to a collection
         * @summary Update a collection\'s routes
         * @param {string} collectionId
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionsCollectionRoutes: async (collectionId: string, inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling postCollectionsCollectionRoutes.');
            }
            const localVarPath = `/collections/{collectionId}/routes`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Collection by its ID.
         * @summary Update Collection
         * @param {string} collectionId
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCollectionsCollectionId: async (collectionId: string, inlineObject4?: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling putCollectionsCollectionId.');
            }
            const localVarPath = `/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject4 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {}) : (inlineObject4 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionsApi - functional programming interface
 * @export
 */
export const CollectionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a Collection by its ID
         * @summary Delete Collection
         * @param {string} collectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollectionsCollectionId(collectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).deleteCollectionsCollectionId(collectionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a paginated response of collections.
         * @summary Get Collections
         * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
         * @param {string} [perPage]
         * @param {string} [fullResponse]
         * @param {string} [sort]
         * @param {string} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionCollection>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).getCollections(include, perPage, fullResponse, sort, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a single Collection by its ID
         * @summary Single Collection
         * @param {string} collectionId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionsCollectionId(collectionId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).getCollectionsCollectionId(collectionId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new collection.
         * @summary Create Collection
         * @param {InlineObject3} [inlineObject3]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollections(inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).postCollections(inlineObject3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Syncs products with a collection.
         * @summary Update a collection\'s products
         * @param {string} collectionId
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionsCollectionIdProducts(collectionId: string, inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).postCollectionsCollectionIdProducts(collectionId, inlineObject2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This request will allow you to attach routes to a collection
         * @summary Update a collection\'s routes
         * @param {string} collectionId
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionsCollectionRoutes(collectionId: string, inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).postCollectionsCollectionRoutes(collectionId, inlineObject1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Collection by its ID.
         * @summary Update Collection
         * @param {string} collectionId
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCollectionsCollectionId(collectionId: string, inlineObject4?: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).putCollectionsCollectionId(collectionId, inlineObject4, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CollectionsApi - factory interface
 * @export
 */
export const CollectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a Collection by its ID
         * @summary Delete Collection
         * @param {string} collectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollectionsCollectionId(collectionId: string, options?: any): AxiosPromise<void> {
            return CollectionsApiFp(configuration).deleteCollectionsCollectionId(collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated response of collections.
         * @summary Get Collections
         * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
         * @param {string} [perPage]
         * @param {string} [fullResponse]
         * @param {string} [sort]
         * @param {string} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): AxiosPromise<CollectionCollection> {
            return CollectionsApiFp(configuration).getCollections(include, perPage, fullResponse, sort, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single Collection by its ID
         * @summary Single Collection
         * @param {string} collectionId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionsCollectionId(collectionId: string, include?: string, options?: any): AxiosPromise<CollectionResponse> {
            return CollectionsApiFp(configuration).getCollectionsCollectionId(collectionId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new collection.
         * @summary Create Collection
         * @param {InlineObject3} [inlineObject3]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollections(inlineObject3?: InlineObject3, options?: any): AxiosPromise<CollectionResponse> {
            return CollectionsApiFp(configuration).postCollections(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * Syncs products with a collection.
         * @summary Update a collection\'s products
         * @param {string} collectionId
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionsCollectionIdProducts(collectionId: string, inlineObject2?: InlineObject2, options?: any): AxiosPromise<CollectionResponse> {
            return CollectionsApiFp(configuration).postCollectionsCollectionIdProducts(collectionId, inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * This request will allow you to attach routes to a collection
         * @summary Update a collection\'s routes
         * @param {string} collectionId
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionsCollectionRoutes(collectionId: string, inlineObject1?: InlineObject1, options?: any): AxiosPromise<CollectionResponse> {
            return CollectionsApiFp(configuration).postCollectionsCollectionRoutes(collectionId, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Collection by its ID.
         * @summary Update Collection
         * @param {string} collectionId
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCollectionsCollectionId(collectionId: string, inlineObject4?: InlineObject4, options?: any): AxiosPromise<CollectionResponse> {
            return CollectionsApiFp(configuration).putCollectionsCollectionId(collectionId, inlineObject4, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export class CollectionsApi extends BaseAPI {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public deleteCollectionsCollectionId(collectionId: string, options?: any) {
        return CollectionsApiFp(this.configuration).deleteCollectionsCollectionId(collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any) {
        return CollectionsApiFp(this.configuration).getCollections(include, perPage, fullResponse, sort, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public getCollectionsCollectionId(collectionId: string, include?: string, options?: any) {
        return CollectionsApiFp(this.configuration).getCollectionsCollectionId(collectionId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public postCollections(inlineObject3?: InlineObject3, options?: any) {
        return CollectionsApiFp(this.configuration).postCollections(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public postCollectionsCollectionIdProducts(collectionId: string, inlineObject2?: InlineObject2, options?: any) {
        return CollectionsApiFp(this.configuration).postCollectionsCollectionIdProducts(collectionId, inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public postCollectionsCollectionRoutes(collectionId: string, inlineObject1?: InlineObject1, options?: any) {
        return CollectionsApiFp(this.configuration).postCollectionsCollectionRoutes(collectionId, inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public putCollectionsCollectionId(collectionId: string, inlineObject4?: InlineObject4, options?: any) {
        return CollectionsApiFp(this.configuration).putCollectionsCollectionId(collectionId, inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

}
