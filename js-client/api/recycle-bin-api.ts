// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { Links } from '../models';
// @ts-ignore
import { RecycleBinCollection } from '../models';
// @ts-ignore
import { RecycleBinResponse } from '../models';
// @ts-ignore
import { Unauthorized } from '../models';
/**
 * RecycleBinApi - axios parameter creator
 * @export
 */
export const RecycleBinApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
         * @summary Delete item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecycleBinItemId: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling deleteRecycleBinItemId.');
            }
            const localVarPath = `/recycle-bin/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of all recycle bin items.
         * @summary Get records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBin: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/recycle-bin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a recycle bin item.
         * @summary Get item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBinItemId: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling getRecycleBinItemId.');
            }
            const localVarPath = `/recycle-bin/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecycleBinApi - functional programming interface
 * @export
 */
export const RecycleBinApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
         * @summary Delete item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecycleBinItemId(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RecycleBinApiAxiosParamCreator(configuration).deleteRecycleBinItemId(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated list of all recycle bin items.
         * @summary Get records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecycleBin(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecycleBinCollection>> {
            const localVarAxiosArgs = await RecycleBinApiAxiosParamCreator(configuration).getRecycleBin(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a recycle bin item.
         * @summary Get item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecycleBinItemId(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecycleBinResponse>> {
            const localVarAxiosArgs = await RecycleBinApiAxiosParamCreator(configuration).getRecycleBinItemId(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RecycleBinApi - factory interface
 * @export
 */
export const RecycleBinApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
         * @summary Delete item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecycleBinItemId(itemId: string, options?: any): AxiosPromise<void> {
            return RecycleBinApiFp(configuration).deleteRecycleBinItemId(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of all recycle bin items.
         * @summary Get records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBin(options?: any): AxiosPromise<RecycleBinCollection> {
            return RecycleBinApiFp(configuration).getRecycleBin(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a recycle bin item.
         * @summary Get item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecycleBinItemId(itemId: string, options?: any): AxiosPromise<RecycleBinResponse> {
            return RecycleBinApiFp(configuration).getRecycleBinItemId(itemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecycleBinApi - object-oriented interface
 * @export
 * @class RecycleBinApi
 * @extends {BaseAPI}
 */
export class RecycleBinApi extends BaseAPI {
    /**
     * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
     * @summary Delete item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    public deleteRecycleBinItemId(itemId: string, options?: any) {
        return RecycleBinApiFp(this.configuration).deleteRecycleBinItemId(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of all recycle bin items.
     * @summary Get records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    public getRecycleBin(options?: any) {
        return RecycleBinApiFp(this.configuration).getRecycleBin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a recycle bin item.
     * @summary Get item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    public getRecycleBinItemId(itemId: string, options?: any) {
        return RecycleBinApiFp(this.configuration).getRecycleBinItemId(itemId, options).then((request) => request(this.axios, this.basePath));
    }

}
