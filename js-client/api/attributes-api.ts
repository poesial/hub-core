// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { AttributeCollection } from '../models';
// @ts-ignore
import { AttributeGroup } from '../models';
// @ts-ignore
import { AttributeGroupCollection } from '../models';
// @ts-ignore
import { AttributeGroupOrderUnprocessableResponse } from '../models';
// @ts-ignore
import { AttributeGroupReorderBody } from '../models';
// @ts-ignore
import { AttributeGroupResponse } from '../models';
// @ts-ignore
import { AttributeResponse } from '../models';
// @ts-ignore
import { AttributesReorderBody } from '../models';
// @ts-ignore
import { CreateAttributeGroupBodyName } from '../models';
// @ts-ignore
import { InlineObject } from '../models';
// @ts-ignore
import { InlineResponse422 } from '../models';
// @ts-ignore
import { InlineResponse4221 } from '../models';
// @ts-ignore
import { UpdateAttributesBody } from '../models';
/**
 * AttributesApi - axios parameter creator
 * @export
 */
export const AttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an attribute group
         * @summary Delete an attribute group
         * @param {string} attributeGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributeGroupsAttributeGroupId: async (attributeGroupId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeGroupId' is not null or undefined
            if (attributeGroupId === null || attributeGroupId === undefined) {
                throw new RequiredError('attributeGroupId','Required parameter attributeGroupId was null or undefined when calling deleteAttributeGroupsAttributeGroupId.');
            }
            const localVarPath = `/attribute-groups/{attributeGroupId}`
                .replace(`{${"attributeGroupId"}}`, encodeURIComponent(String(attributeGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an attribute.
         * @summary Delete an attribute
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributesAttributeId: async (attributeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new RequiredError('attributeId','Required parameter attributeId was null or undefined when calling deleteAttributesAttributeId.');
            }
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of available attribute groups
         * @summary Paginated list of Attribute Groups
         * @param {boolean} [allRecords] Will skip pagination and return all records
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroups: async (allRecords?: boolean, include?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/attribute-groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (allRecords !== undefined) {
                localVarQueryParameter['all_records'] = allRecords;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single attribute group
         * @summary Get a single attribute group
         * @param {string} attributeGroupId
         * @param {number} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroupsAttributeGroupId: async (attributeGroupId: string, include?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeGroupId' is not null or undefined
            if (attributeGroupId === null || attributeGroupId === undefined) {
                throw new RequiredError('attributeGroupId','Required parameter attributeGroupId was null or undefined when calling getAttributeGroupsAttributeGroupId.');
            }
            const localVarPath = `/attribute-groups/{attributeGroupId}`
                .replace(`{${"attributeGroupId"}}`, encodeURIComponent(String(attributeGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a paged array of attributes
         * @summary Get Attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an attribute from a given ID.
         * @summary Get an attribute
         * @param {string} attributeId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeId: async (attributeId: string, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new RequiredError('attributeId','Required parameter attributeId was null or undefined when calling getAttributesAttributeId.');
            }
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create an Attribute Group
         * @param {CreateAttributeGroupBodyName} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributeGroups: async (name?: CreateAttributeGroupBodyName, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/attribute-groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new attribute
         * @summary Create Attribute
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributes: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an attribute group.
         * @summary Update an attribute group
         * @param {string} attributeGroupId
         * @param {AttributeGroup} [attributeGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsAttributeGroupId: async (attributeGroupId: string, attributeGroup?: AttributeGroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeGroupId' is not null or undefined
            if (attributeGroupId === null || attributeGroupId === undefined) {
                throw new RequiredError('attributeGroupId','Required parameter attributeGroupId was null or undefined when calling putAttributeGroupsAttributeGroupId.');
            }
            const localVarPath = `/attribute-groups/{attributeGroupId}`
                .replace(`{${"attributeGroupId"}}`, encodeURIComponent(String(attributeGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attributeGroup !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attributeGroup !== undefined ? attributeGroup : {}) : (attributeGroup || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a request to reorder the attribute groups in the system
         * @summary Reorder attribute groups
         * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsReorder: async (attributeGroupReorderBody?: AttributeGroupReorderBody, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/attribute-groups/reorder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attributeGroupReorderBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attributeGroupReorderBody !== undefined ? attributeGroupReorderBody : {}) : (attributeGroupReorderBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an attribute from a given ID.
         * @summary Update an attribute
         * @param {string} attributeId
         * @param {UpdateAttributesBody} [updateAttributesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesAttributeId: async (attributeId: string, updateAttributesBody?: UpdateAttributesBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new RequiredError('attributeId','Required parameter attributeId was null or undefined when calling putAttributesAttributeId.');
            }
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateAttributesBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateAttributesBody !== undefined ? updateAttributesBody : {}) : (updateAttributesBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows you to reorder a target category in relation to another.
         * @summary Update request to reorder attributes
         * @param {AttributesReorderBody} [attributesReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesOrder: async (attributesReorderBody?: AttributesReorderBody, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/attributes/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attributesReorderBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attributesReorderBody !== undefined ? attributesReorderBody : {}) : (attributesReorderBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributesApi - functional programming interface
 * @export
 */
export const AttributesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes an attribute group
         * @summary Delete an attribute group
         * @param {string} attributeGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttributeGroupsAttributeGroupId(attributeGroupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).deleteAttributeGroupsAttributeGroupId(attributeGroupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an attribute.
         * @summary Delete an attribute
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttributesAttributeId(attributeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).deleteAttributesAttributeId(attributeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated list of available attribute groups
         * @summary Paginated list of Attribute Groups
         * @param {boolean} [allRecords] Will skip pagination and return all records
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributeGroups(allRecords?: boolean, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupCollection>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).getAttributeGroups(allRecords, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a single attribute group
         * @summary Get a single attribute group
         * @param {string} attributeGroupId
         * @param {number} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributeGroupsAttributeGroupId(attributeGroupId: string, include?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupResponse>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).getAttributeGroupsAttributeGroupId(attributeGroupId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a paged array of attributes
         * @summary Get Attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeCollection>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).getAttributes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an attribute from a given ID.
         * @summary Get an attribute
         * @param {string} attributeId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributesAttributeId(attributeId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResponse>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).getAttributesAttributeId(attributeId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create an Attribute Group
         * @param {CreateAttributeGroupBodyName} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAttributeGroups(name?: CreateAttributeGroupBodyName, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupResponse>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).postAttributeGroups(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new attribute
         * @summary Create Attribute
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAttributes(inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResponse>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).postAttributes(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an attribute group.
         * @summary Update an attribute group
         * @param {string} attributeGroupId
         * @param {AttributeGroup} [attributeGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAttributeGroupsAttributeGroupId(attributeGroupId: string, attributeGroup?: AttributeGroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupResponse>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sends a request to reorder the attribute groups in the system
         * @summary Reorder attribute groups
         * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAttributeGroupsReorder(attributeGroupReorderBody?: AttributeGroupReorderBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).putAttributeGroupsReorder(attributeGroupReorderBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an attribute from a given ID.
         * @summary Update an attribute
         * @param {string} attributeId
         * @param {UpdateAttributesBody} [updateAttributesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAttributesAttributeId(attributeId: string, updateAttributesBody?: UpdateAttributesBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResponse>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).putAttributesAttributeId(attributeId, updateAttributesBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows you to reorder a target category in relation to another.
         * @summary Update request to reorder attributes
         * @param {AttributesReorderBody} [attributesReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAttributesOrder(attributesReorderBody?: AttributesReorderBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AttributesApiAxiosParamCreator(configuration).putAttributesOrder(attributesReorderBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AttributesApi - factory interface
 * @export
 */
export const AttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes an attribute group
         * @summary Delete an attribute group
         * @param {string} attributeGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributeGroupsAttributeGroupId(attributeGroupId: string, options?: any): AxiosPromise<void> {
            return AttributesApiFp(configuration).deleteAttributeGroupsAttributeGroupId(attributeGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an attribute.
         * @summary Delete an attribute
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttributesAttributeId(attributeId: string, options?: any): AxiosPromise<void> {
            return AttributesApiFp(configuration).deleteAttributesAttributeId(attributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of available attribute groups
         * @summary Paginated list of Attribute Groups
         * @param {boolean} [allRecords] Will skip pagination and return all records
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroups(allRecords?: boolean, include?: string, options?: any): AxiosPromise<AttributeGroupCollection> {
            return AttributesApiFp(configuration).getAttributeGroups(allRecords, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single attribute group
         * @summary Get a single attribute group
         * @param {string} attributeGroupId
         * @param {number} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeGroupsAttributeGroupId(attributeGroupId: string, include?: number, options?: any): AxiosPromise<AttributeGroupResponse> {
            return AttributesApiFp(configuration).getAttributeGroupsAttributeGroupId(attributeGroupId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a paged array of attributes
         * @summary Get Attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(options?: any): AxiosPromise<AttributeCollection> {
            return AttributesApiFp(configuration).getAttributes(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an attribute from a given ID.
         * @summary Get an attribute
         * @param {string} attributeId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeId(attributeId: string, include?: string, options?: any): AxiosPromise<AttributeResponse> {
            return AttributesApiFp(configuration).getAttributesAttributeId(attributeId, include, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create an Attribute Group
         * @param {CreateAttributeGroupBodyName} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributeGroups(name?: CreateAttributeGroupBodyName, options?: any): AxiosPromise<AttributeGroupResponse> {
            return AttributesApiFp(configuration).postAttributeGroups(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new attribute
         * @summary Create Attribute
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributes(inlineObject?: InlineObject, options?: any): AxiosPromise<AttributeResponse> {
            return AttributesApiFp(configuration).postAttributes(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an attribute group.
         * @summary Update an attribute group
         * @param {string} attributeGroupId
         * @param {AttributeGroup} [attributeGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsAttributeGroupId(attributeGroupId: string, attributeGroup?: AttributeGroup, options?: any): AxiosPromise<AttributeGroupResponse> {
            return AttributesApiFp(configuration).putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a request to reorder the attribute groups in the system
         * @summary Reorder attribute groups
         * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributeGroupsReorder(attributeGroupReorderBody?: AttributeGroupReorderBody, options?: any): AxiosPromise<void> {
            return AttributesApiFp(configuration).putAttributeGroupsReorder(attributeGroupReorderBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an attribute from a given ID.
         * @summary Update an attribute
         * @param {string} attributeId
         * @param {UpdateAttributesBody} [updateAttributesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesAttributeId(attributeId: string, updateAttributesBody?: UpdateAttributesBody, options?: any): AxiosPromise<AttributeResponse> {
            return AttributesApiFp(configuration).putAttributesAttributeId(attributeId, updateAttributesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows you to reorder a target category in relation to another.
         * @summary Update request to reorder attributes
         * @param {AttributesReorderBody} [attributesReorderBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAttributesOrder(attributesReorderBody?: AttributesReorderBody, options?: any): AxiosPromise<void> {
            return AttributesApiFp(configuration).putAttributesOrder(attributesReorderBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export class AttributesApi extends BaseAPI {
    /**
     * Deletes an attribute group
     * @summary Delete an attribute group
     * @param {string} attributeGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public deleteAttributeGroupsAttributeGroupId(attributeGroupId: string, options?: any) {
        return AttributesApiFp(this.configuration).deleteAttributeGroupsAttributeGroupId(attributeGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an attribute.
     * @summary Delete an attribute
     * @param {string} attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public deleteAttributesAttributeId(attributeId: string, options?: any) {
        return AttributesApiFp(this.configuration).deleteAttributesAttributeId(attributeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of available attribute groups
     * @summary Paginated list of Attribute Groups
     * @param {boolean} [allRecords] Will skip pagination and return all records
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public getAttributeGroups(allRecords?: boolean, include?: string, options?: any) {
        return AttributesApiFp(this.configuration).getAttributeGroups(allRecords, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a single attribute group
     * @summary Get a single attribute group
     * @param {string} attributeGroupId
     * @param {number} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public getAttributeGroupsAttributeGroupId(attributeGroupId: string, include?: number, options?: any) {
        return AttributesApiFp(this.configuration).getAttributeGroupsAttributeGroupId(attributeGroupId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a paged array of attributes
     * @summary Get Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public getAttributes(options?: any) {
        return AttributesApiFp(this.configuration).getAttributes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an attribute from a given ID.
     * @summary Get an attribute
     * @param {string} attributeId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public getAttributesAttributeId(attributeId: string, include?: string, options?: any) {
        return AttributesApiFp(this.configuration).getAttributesAttributeId(attributeId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create an Attribute Group
     * @param {CreateAttributeGroupBodyName} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public postAttributeGroups(name?: CreateAttributeGroupBodyName, options?: any) {
        return AttributesApiFp(this.configuration).postAttributeGroups(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new attribute
     * @summary Create Attribute
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public postAttributes(inlineObject?: InlineObject, options?: any) {
        return AttributesApiFp(this.configuration).postAttributes(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an attribute group.
     * @summary Update an attribute group
     * @param {string} attributeGroupId
     * @param {AttributeGroup} [attributeGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public putAttributeGroupsAttributeGroupId(attributeGroupId: string, attributeGroup?: AttributeGroup, options?: any) {
        return AttributesApiFp(this.configuration).putAttributeGroupsAttributeGroupId(attributeGroupId, attributeGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a request to reorder the attribute groups in the system
     * @summary Reorder attribute groups
     * @param {AttributeGroupReorderBody} [attributeGroupReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public putAttributeGroupsReorder(attributeGroupReorderBody?: AttributeGroupReorderBody, options?: any) {
        return AttributesApiFp(this.configuration).putAttributeGroupsReorder(attributeGroupReorderBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an attribute from a given ID.
     * @summary Update an attribute
     * @param {string} attributeId
     * @param {UpdateAttributesBody} [updateAttributesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public putAttributesAttributeId(attributeId: string, updateAttributesBody?: UpdateAttributesBody, options?: any) {
        return AttributesApiFp(this.configuration).putAttributesAttributeId(attributeId, updateAttributesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows you to reorder a target category in relation to another.
     * @summary Update request to reorder attributes
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public putAttributesOrder(attributesReorderBody?: AttributesReorderBody, options?: any) {
        return AttributesApiFp(this.configuration).putAttributesOrder(attributesReorderBody, options).then((request) => request(this.axios, this.basePath));
    }

}
