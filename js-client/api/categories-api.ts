// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { AttachCategoryChannelsBody } from '../models';
// @ts-ignore
import { AttachCategoryCustomerGroupsBody } from '../models';
// @ts-ignore
import { AttachCategoryProductsBody } from '../models';
// @ts-ignore
import { AttachCategoryRoutesBody } from '../models';
// @ts-ignore
import { CategoryAttachLayoutBody } from '../models';
// @ts-ignore
import { CategoryCollection } from '../models';
// @ts-ignore
import { CategoryResponse } from '../models';
// @ts-ignore
import { CreateCategoryBody } from '../models';
// @ts-ignore
import { Message } from '../models';
// @ts-ignore
import { ReorderCategoryBody } from '../models';
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a paginated resource of categories
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single category from a given ID
         * @summary Return a single category
         * @param {string} categoryId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesCategoryId: async (categoryId: string, includes?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling getCategoriesCategoryId.');
            }
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns categories by a given parent ID.
         * @summary Get categories by parent id
         * @param {string} parentId If omitted will return top level catgories
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesParentParentId: async (parentId: string, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new RequiredError('parentId','Required parameter parentId was null or undefined when calling getCategoriesParentParentId.');
            }
            const localVarPath = `/categories/parent/{parentId}`
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attaches channels to a catagory
         * @summary Attach channels to a category
         * @param {string} categoryId
         * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdChannels: async (categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling postCategoriesCategoryIdChannels.');
            }
            const localVarPath = `/categories/{categoryId}/channels`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attachCategoryChannelsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attachCategoryChannelsBody !== undefined ? attachCategoryChannelsBody : {}) : (attachCategoryChannelsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attaches customer groups to a category resource.
         * @summary Attach customer groups to a category
         * @param {string} categoryId
         * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdCustomerGroups: async (categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling postCategoriesCategoryIdCustomerGroups.');
            }
            const localVarPath = `/categories/{categoryId}/customer-groups`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attachCategoryCustomerGroupsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attachCategoryCustomerGroupsBody !== undefined ? attachCategoryCustomerGroupsBody : {}) : (attachCategoryCustomerGroupsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or return the current category draft resource.
         * @summary Create or retrieve the current category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdDrafts: async (categoryId: string, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling postCategoriesCategoryIdDrafts.');
            }
            const localVarPath = `/categories/{categoryId}/drafts`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attaches layouts to a category resource
         * @summary Update a category layout
         * @param {string} categoryId
         * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryLayouts: async (categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling postCategoriesCategoryLayouts.');
            }
            const localVarPath = `/categories/{categoryId}/layouts`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof categoryAttachLayoutBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(categoryAttachLayoutBody !== undefined ? categoryAttachLayoutBody : {}) : (categoryAttachLayoutBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attaches routes to a category resource.
         * @summary Update a category\'s routes
         * @param {string} categoryId
         * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryRoutes: async (categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling postCategoriesCategoryRoutes.');
            }
            const localVarPath = `/categories/{categoryId}/routes`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attachCategoryRoutesBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attachCategoryRoutesBody !== undefined ? attachCategoryRoutesBody : {}) : (attachCategoryRoutesBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reorder a category
         * @param {ReorderCategoryBody} [reorderCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesReorder: async (reorderCategoryBody?: ReorderCategoryBody, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories/reorder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof reorderCategoryBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(reorderCategoryBody !== undefined ? reorderCategoryBody : {}) : (reorderCategoryBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a category draft
         * @summary Publishes a category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCategoryDraft: async (categoryId: string, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling publishCategoryDraft.');
            }
            const localVarPath = `/categories/{categoryId}/publish`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a category using a given ID.
         * @summary Update a category
         * @param {string} categoryId
         * @param {CreateCategoryBody} [createCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryId: async (categoryId: string, createCategoryBody?: CreateCategoryBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling putCategoriesCategoryId.');
            }
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createCategoryBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createCategoryBody !== undefined ? createCategoryBody : {}) : (createCategoryBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attaches products to a category resource.
         * @summary Attach products
         * @param {string} categoryId
         * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryIdProducts: async (categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling putCategoriesCategoryIdProducts.');
            }
            const localVarPath = `/categories/{categoryId}/products`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attachCategoryProductsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attachCategoryProductsBody !== undefined ? attachCategoryProductsBody : {}) : (attachCategoryProductsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a paginated resource of categories
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryCollection>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).getCategories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single category from a given ID
         * @summary Return a single category
         * @param {string} categoryId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesCategoryId(categoryId: string, includes?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).getCategoriesCategoryId(categoryId, includes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns categories by a given parent ID.
         * @summary Get categories by parent id
         * @param {string} parentId If omitted will return top level catgories
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesParentParentId(parentId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryCollection>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).getCategoriesParentParentId(parentId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Attaches channels to a catagory
         * @summary Attach channels to a category
         * @param {string} categoryId
         * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategoriesCategoryIdChannels(categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Attaches customer groups to a category resource.
         * @summary Attach customer groups to a category
         * @param {string} categoryId
         * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategoriesCategoryIdCustomerGroups(categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create or return the current category draft resource.
         * @summary Create or retrieve the current category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategoriesCategoryIdDrafts(categoryId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryIdDrafts(categoryId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Attaches layouts to a category resource
         * @summary Update a category layout
         * @param {string} categoryId
         * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategoriesCategoryLayouts(categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Attaches routes to a category resource.
         * @summary Update a category\'s routes
         * @param {string} categoryId
         * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategoriesCategoryRoutes(categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Reorder a category
         * @param {ReorderCategoryBody} [reorderCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategoriesReorder(reorderCategoryBody?: ReorderCategoryBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).postCategoriesReorder(reorderCategoryBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes a category draft
         * @summary Publishes a category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishCategoryDraft(categoryId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).publishCategoryDraft(categoryId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a category using a given ID.
         * @summary Update a category
         * @param {string} categoryId
         * @param {CreateCategoryBody} [createCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategoriesCategoryId(categoryId: string, createCategoryBody?: CreateCategoryBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).putCategoriesCategoryId(categoryId, createCategoryBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Attaches products to a category resource.
         * @summary Attach products
         * @param {string} categoryId
         * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategoriesCategoryIdProducts(categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await CategoriesApiAxiosParamCreator(configuration).putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a paginated resource of categories
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any): AxiosPromise<CategoryCollection> {
            return CategoriesApiFp(configuration).getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single category from a given ID
         * @summary Return a single category
         * @param {string} categoryId
         * @param {string} [includes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesCategoryId(categoryId: string, includes?: string, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).getCategoriesCategoryId(categoryId, includes, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns categories by a given parent ID.
         * @summary Get categories by parent id
         * @param {string} parentId If omitted will return top level catgories
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesParentParentId(parentId: string, include?: string, options?: any): AxiosPromise<CategoryCollection> {
            return CategoriesApiFp(configuration).getCategoriesParentParentId(parentId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches channels to a catagory
         * @summary Attach channels to a category
         * @param {string} categoryId
         * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdChannels(categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches customer groups to a category resource.
         * @summary Attach customer groups to a category
         * @param {string} categoryId
         * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdCustomerGroups(categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or return the current category draft resource.
         * @summary Create or retrieve the current category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryIdDrafts(categoryId: string, include?: string, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).postCategoriesCategoryIdDrafts(categoryId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches layouts to a category resource
         * @summary Update a category layout
         * @param {string} categoryId
         * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryLayouts(categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches routes to a category resource.
         * @summary Update a category\'s routes
         * @param {string} categoryId
         * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesCategoryRoutes(categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Reorder a category
         * @param {ReorderCategoryBody} [reorderCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategoriesReorder(reorderCategoryBody?: ReorderCategoryBody, options?: any): AxiosPromise<Message> {
            return CategoriesApiFp(configuration).postCategoriesReorder(reorderCategoryBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a category draft
         * @summary Publishes a category draft
         * @param {string} categoryId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishCategoryDraft(categoryId: string, include?: string, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).publishCategoryDraft(categoryId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a category using a given ID.
         * @summary Update a category
         * @param {string} categoryId
         * @param {CreateCategoryBody} [createCategoryBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryId(categoryId: string, createCategoryBody?: CreateCategoryBody, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).putCategoriesCategoryId(categoryId, createCategoryBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Attaches products to a category resource.
         * @summary Attach products
         * @param {string} categoryId
         * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesCategoryIdProducts(categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options?: any): AxiosPromise<CategoryResponse> {
            return CategoriesApiFp(configuration).putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * Returns a paginated resource of categories
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategories(options?: any) {
        return CategoriesApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single category from a given ID
     * @summary Return a single category
     * @param {string} categoryId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategoriesCategoryId(categoryId: string, includes?: string, options?: any) {
        return CategoriesApiFp(this.configuration).getCategoriesCategoryId(categoryId, includes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns categories by a given parent ID.
     * @summary Get categories by parent id
     * @param {string} parentId If omitted will return top level catgories
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategoriesParentParentId(parentId: string, include?: string, options?: any) {
        return CategoriesApiFp(this.configuration).getCategoriesParentParentId(parentId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attaches channels to a catagory
     * @summary Attach channels to a category
     * @param {string} categoryId
     * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public postCategoriesCategoryIdChannels(categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options?: any) {
        return CategoriesApiFp(this.configuration).postCategoriesCategoryIdChannels(categoryId, attachCategoryChannelsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attaches customer groups to a category resource.
     * @summary Attach customer groups to a category
     * @param {string} categoryId
     * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public postCategoriesCategoryIdCustomerGroups(categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options?: any) {
        return CategoriesApiFp(this.configuration).postCategoriesCategoryIdCustomerGroups(categoryId, attachCategoryCustomerGroupsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or return the current category draft resource.
     * @summary Create or retrieve the current category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public postCategoriesCategoryIdDrafts(categoryId: string, include?: string, options?: any) {
        return CategoriesApiFp(this.configuration).postCategoriesCategoryIdDrafts(categoryId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attaches layouts to a category resource
     * @summary Update a category layout
     * @param {string} categoryId
     * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public postCategoriesCategoryLayouts(categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options?: any) {
        return CategoriesApiFp(this.configuration).postCategoriesCategoryLayouts(categoryId, categoryAttachLayoutBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attaches routes to a category resource.
     * @summary Update a category\'s routes
     * @param {string} categoryId
     * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public postCategoriesCategoryRoutes(categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options?: any) {
        return CategoriesApiFp(this.configuration).postCategoriesCategoryRoutes(categoryId, attachCategoryRoutesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Reorder a category
     * @param {ReorderCategoryBody} [reorderCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public postCategoriesReorder(reorderCategoryBody?: ReorderCategoryBody, options?: any) {
        return CategoriesApiFp(this.configuration).postCategoriesReorder(reorderCategoryBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a category draft
     * @summary Publishes a category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public publishCategoryDraft(categoryId: string, include?: string, options?: any) {
        return CategoriesApiFp(this.configuration).publishCategoryDraft(categoryId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a category using a given ID.
     * @summary Update a category
     * @param {string} categoryId
     * @param {CreateCategoryBody} [createCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public putCategoriesCategoryId(categoryId: string, createCategoryBody?: CreateCategoryBody, options?: any) {
        return CategoriesApiFp(this.configuration).putCategoriesCategoryId(categoryId, createCategoryBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attaches products to a category resource.
     * @summary Attach products
     * @param {string} categoryId
     * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public putCategoriesCategoryIdProducts(categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options?: any) {
        return CategoriesApiFp(this.configuration).putCategoriesCategoryIdProducts(categoryId, attachCategoryProductsBody, options).then((request) => request(this.axios, this.basePath));
    }

}
