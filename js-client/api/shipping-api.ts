// tslint:disable
/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 0.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiError } from '../models';
// @ts-ignore
import { InlineObject26 } from '../models';
// @ts-ignore
import { InlineObject27 } from '../models';
// @ts-ignore
import { InlineObject28 } from '../models';
// @ts-ignore
import { InlineObject29 } from '../models';
// @ts-ignore
import { InlineObject30 } from '../models';
// @ts-ignore
import { InlineObject31 } from '../models';
// @ts-ignore
import { InlineObject32 } from '../models';
// @ts-ignore
import { InlineResponse2007 } from '../models';
// @ts-ignore
import { InlineResponse42210 } from '../models';
// @ts-ignore
import { InlineResponse42211 } from '../models';
// @ts-ignore
import { InlineResponse4229 } from '../models';
// @ts-ignore
import { ShippingMethodCollection } from '../models';
// @ts-ignore
import { ShippingMethodResponse } from '../models';
// @ts-ignore
import { ShippingPriceResponse } from '../models';
// @ts-ignore
import { ShippingZoneCollection } from '../models';
// @ts-ignore
import { ShippingZoneResponse } from '../models';
/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a shipping method.
         * @summary Delete shipping method
         * @param {string} shippingMethodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingShippingMethodId: async (shippingMethodId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new RequiredError('shippingMethodId','Required parameter shippingMethodId was null or undefined when calling deleteShippingShippingMethodId.');
            }
            const localVarPath = `/shipping/{shippingMethodId}`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of shipping methods
         * @summary Get shipping methods
         * @param {number} [perPage]
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipping: async (perPage?: number, include?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/shipping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a shipping method by it\'s ID.
         * @summary Get shipping methods
         * @param {string} shippingMethodId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingShippingMethodId: async (shippingMethodId: string, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new RequiredError('shippingMethodId','Required parameter shippingMethodId was null or undefined when calling getShippingShippingMethodId.');
            }
            const localVarPath = `/shipping/{shippingMethodId}`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of shipping zones.
         * @summary Get Shipping Zones
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZones: async (include?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/shipping/zones`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a shipping zone by it\'s ID.
         * @summary Get Shipping Zone
         * @param {string} shippingZoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZonesShippingZoneId: async (shippingZoneId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingZoneId' is not null or undefined
            if (shippingZoneId === null || shippingZoneId === undefined) {
                throw new RequiredError('shippingZoneId','Required parameter shippingZoneId was null or undefined when calling getShippingZonesShippingZoneId.');
            }
            const localVarPath = `/shipping/zones/{shippingZoneId}`
                .replace(`{${"shippingZoneId"}}`, encodeURIComponent(String(shippingZoneId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new shipping method.
         * @summary Create shipping method
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShipping: async (inlineObject26?: InlineObject26, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/shipping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject26 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject26 !== undefined ? inlineObject26 : {}) : (inlineObject26 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a price to a shipping method.
         * @summary Add shipping price
         * @param {string} shippingMethodId
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingIdPrices: async (shippingMethodId: string, inlineObject29?: InlineObject29, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new RequiredError('shippingMethodId','Required parameter shippingMethodId was null or undefined when calling postShippingIdPrices.');
            }
            const localVarPath = `/shipping/{shippingMethodId}/prices`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject29 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject29 !== undefined ? inlineObject29 : {}) : (inlineObject29 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new shipping zone
         * @summary Create Shipping Zone
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingZones: async (inlineObject28?: InlineObject28, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/shipping/zones`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject28 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject28 !== undefined ? inlineObject28 : {}) : (inlineObject28 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update shipping method users
         * @summary Update shipping method users
         * @param {string} id
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingIdUsers: async (id: string, inlineObject32?: InlineObject32, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putShippingIdUsers.');
            }
            const localVarPath = `/shipping/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject32 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject32 !== undefined ? inlineObject32 : {}) : (inlineObject32 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a shipping price
         * @summary Update shipping price
         * @param {string} shippingPriceId
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingPricesShippingPriceId: async (shippingPriceId: string, inlineObject30?: InlineObject30, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingPriceId' is not null or undefined
            if (shippingPriceId === null || shippingPriceId === undefined) {
                throw new RequiredError('shippingPriceId','Required parameter shippingPriceId was null or undefined when calling putShippingPricesShippingPriceId.');
            }
            const localVarPath = `/shipping/prices/{shippingPriceId}`
                .replace(`{${"shippingPriceId"}}`, encodeURIComponent(String(shippingPriceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject30 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject30 !== undefined ? inlineObject30 : {}) : (inlineObject30 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update shipping method by it\'s ID
         * @summary Update shipping method
         * @param {string} shippingMethodId
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodId: async (shippingMethodId: string, inlineObject27?: InlineObject27, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new RequiredError('shippingMethodId','Required parameter shippingMethodId was null or undefined when calling putShippingShippingMethodId.');
            }
            const localVarPath = `/shipping/{shippingMethodId}`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject27 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject27 !== undefined ? inlineObject27 : {}) : (inlineObject27 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a shipping method\'s zones.
         * @summary Update shipping method zones
         * @param {string} shippingMethodId
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodIdZones: async (shippingMethodId: string, inlineObject31?: InlineObject31, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingMethodId' is not null or undefined
            if (shippingMethodId === null || shippingMethodId === undefined) {
                throw new RequiredError('shippingMethodId','Required parameter shippingMethodId was null or undefined when calling putShippingShippingMethodIdZones.');
            }
            const localVarPath = `/shipping/{shippingMethodId}/zones`
                .replace(`{${"shippingMethodId"}}`, encodeURIComponent(String(shippingMethodId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject31 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject31 !== undefined ? inlineObject31 : {}) : (inlineObject31 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a shipping method.
         * @summary Delete shipping method
         * @param {string} shippingMethodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShippingShippingMethodId(shippingMethodId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).deleteShippingShippingMethodId(shippingMethodId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated list of shipping methods
         * @summary Get shipping methods
         * @param {number} [perPage]
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipping(perPage?: number, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodCollection>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).getShipping(perPage, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a shipping method by it\'s ID.
         * @summary Get shipping methods
         * @param {string} shippingMethodId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingShippingMethodId(shippingMethodId: string, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).getShippingShippingMethodId(shippingMethodId, include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a paginated list of shipping zones.
         * @summary Get Shipping Zones
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingZones(include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneCollection>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).getShippingZones(include, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a shipping zone by it\'s ID.
         * @summary Get Shipping Zone
         * @param {string} shippingZoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingZonesShippingZoneId(shippingZoneId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).getShippingZonesShippingZoneId(shippingZoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new shipping method.
         * @summary Create shipping method
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postShipping(inlineObject26?: InlineObject26, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).postShipping(inlineObject26, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a price to a shipping method.
         * @summary Add shipping price
         * @param {string} shippingMethodId
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postShippingIdPrices(shippingMethodId: string, inlineObject29?: InlineObject29, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingPriceResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).postShippingIdPrices(shippingMethodId, inlineObject29, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new shipping zone
         * @summary Create Shipping Zone
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postShippingZones(inlineObject28?: InlineObject28, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).postShippingZones(inlineObject28, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update shipping method users
         * @summary Update shipping method users
         * @param {string} id
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShippingIdUsers(id: string, inlineObject32?: InlineObject32, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).putShippingIdUsers(id, inlineObject32, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a shipping price
         * @summary Update shipping price
         * @param {string} shippingPriceId
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShippingPricesShippingPriceId(shippingPriceId: string, inlineObject30?: InlineObject30, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingPriceResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update shipping method by it\'s ID
         * @summary Update shipping method
         * @param {string} shippingMethodId
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShippingShippingMethodId(shippingMethodId: string, inlineObject27?: InlineObject27, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).putShippingShippingMethodId(shippingMethodId, inlineObject27, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a shipping method\'s zones.
         * @summary Update shipping method zones
         * @param {string} shippingMethodId
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShippingShippingMethodIdZones(shippingMethodId: string, inlineObject31?: InlineObject31, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>> {
            const localVarAxiosArgs = await ShippingApiAxiosParamCreator(configuration).putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a shipping method.
         * @summary Delete shipping method
         * @param {string} shippingMethodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShippingShippingMethodId(shippingMethodId: string, options?: any): AxiosPromise<void> {
            return ShippingApiFp(configuration).deleteShippingShippingMethodId(shippingMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of shipping methods
         * @summary Get shipping methods
         * @param {number} [perPage]
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipping(perPage?: number, include?: string, options?: any): AxiosPromise<ShippingMethodCollection> {
            return ShippingApiFp(configuration).getShipping(perPage, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a shipping method by it\'s ID.
         * @summary Get shipping methods
         * @param {string} shippingMethodId
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingShippingMethodId(shippingMethodId: string, include?: string, options?: any): AxiosPromise<ShippingMethodResponse> {
            return ShippingApiFp(configuration).getShippingShippingMethodId(shippingMethodId, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of shipping zones.
         * @summary Get Shipping Zones
         * @param {string} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZones(include?: string, options?: any): AxiosPromise<ShippingZoneCollection> {
            return ShippingApiFp(configuration).getShippingZones(include, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a shipping zone by it\'s ID.
         * @summary Get Shipping Zone
         * @param {string} shippingZoneId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingZonesShippingZoneId(shippingZoneId: string, options?: any): AxiosPromise<ShippingZoneResponse> {
            return ShippingApiFp(configuration).getShippingZonesShippingZoneId(shippingZoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new shipping method.
         * @summary Create shipping method
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShipping(inlineObject26?: InlineObject26, options?: any): AxiosPromise<InlineResponse2007> {
            return ShippingApiFp(configuration).postShipping(inlineObject26, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a price to a shipping method.
         * @summary Add shipping price
         * @param {string} shippingMethodId
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingIdPrices(shippingMethodId: string, inlineObject29?: InlineObject29, options?: any): AxiosPromise<ShippingPriceResponse> {
            return ShippingApiFp(configuration).postShippingIdPrices(shippingMethodId, inlineObject29, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new shipping zone
         * @summary Create Shipping Zone
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShippingZones(inlineObject28?: InlineObject28, options?: any): AxiosPromise<ShippingZoneResponse> {
            return ShippingApiFp(configuration).postShippingZones(inlineObject28, options).then((request) => request(axios, basePath));
        },
        /**
         * Update shipping method users
         * @summary Update shipping method users
         * @param {string} id
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingIdUsers(id: string, inlineObject32?: InlineObject32, options?: any): AxiosPromise<ShippingMethodResponse> {
            return ShippingApiFp(configuration).putShippingIdUsers(id, inlineObject32, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shipping price
         * @summary Update shipping price
         * @param {string} shippingPriceId
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingPricesShippingPriceId(shippingPriceId: string, inlineObject30?: InlineObject30, options?: any): AxiosPromise<ShippingPriceResponse> {
            return ShippingApiFp(configuration).putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options).then((request) => request(axios, basePath));
        },
        /**
         * Update shipping method by it\'s ID
         * @summary Update shipping method
         * @param {string} shippingMethodId
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodId(shippingMethodId: string, inlineObject27?: InlineObject27, options?: any): AxiosPromise<ShippingMethodResponse> {
            return ShippingApiFp(configuration).putShippingShippingMethodId(shippingMethodId, inlineObject27, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shipping method\'s zones.
         * @summary Update shipping method zones
         * @param {string} shippingMethodId
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShippingShippingMethodIdZones(shippingMethodId: string, inlineObject31?: InlineObject31, options?: any): AxiosPromise<ShippingMethodResponse> {
            return ShippingApiFp(configuration).putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
    /**
     * Deletes a shipping method.
     * @summary Delete shipping method
     * @param {string} shippingMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public deleteShippingShippingMethodId(shippingMethodId: string, options?: any) {
        return ShippingApiFp(this.configuration).deleteShippingShippingMethodId(shippingMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of shipping methods
     * @summary Get shipping methods
     * @param {number} [perPage]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getShipping(perPage?: number, include?: string, options?: any) {
        return ShippingApiFp(this.configuration).getShipping(perPage, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a shipping method by it\'s ID.
     * @summary Get shipping methods
     * @param {string} shippingMethodId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getShippingShippingMethodId(shippingMethodId: string, include?: string, options?: any) {
        return ShippingApiFp(this.configuration).getShippingShippingMethodId(shippingMethodId, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of shipping zones.
     * @summary Get Shipping Zones
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getShippingZones(include?: string, options?: any) {
        return ShippingApiFp(this.configuration).getShippingZones(include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a shipping zone by it\'s ID.
     * @summary Get Shipping Zone
     * @param {string} shippingZoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getShippingZonesShippingZoneId(shippingZoneId: string, options?: any) {
        return ShippingApiFp(this.configuration).getShippingZonesShippingZoneId(shippingZoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new shipping method.
     * @summary Create shipping method
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public postShipping(inlineObject26?: InlineObject26, options?: any) {
        return ShippingApiFp(this.configuration).postShipping(inlineObject26, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a price to a shipping method.
     * @summary Add shipping price
     * @param {string} shippingMethodId
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public postShippingIdPrices(shippingMethodId: string, inlineObject29?: InlineObject29, options?: any) {
        return ShippingApiFp(this.configuration).postShippingIdPrices(shippingMethodId, inlineObject29, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new shipping zone
     * @summary Create Shipping Zone
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public postShippingZones(inlineObject28?: InlineObject28, options?: any) {
        return ShippingApiFp(this.configuration).postShippingZones(inlineObject28, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update shipping method users
     * @summary Update shipping method users
     * @param {string} id
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public putShippingIdUsers(id: string, inlineObject32?: InlineObject32, options?: any) {
        return ShippingApiFp(this.configuration).putShippingIdUsers(id, inlineObject32, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a shipping price
     * @summary Update shipping price
     * @param {string} shippingPriceId
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public putShippingPricesShippingPriceId(shippingPriceId: string, inlineObject30?: InlineObject30, options?: any) {
        return ShippingApiFp(this.configuration).putShippingPricesShippingPriceId(shippingPriceId, inlineObject30, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update shipping method by it\'s ID
     * @summary Update shipping method
     * @param {string} shippingMethodId
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public putShippingShippingMethodId(shippingMethodId: string, inlineObject27?: InlineObject27, options?: any) {
        return ShippingApiFp(this.configuration).putShippingShippingMethodId(shippingMethodId, inlineObject27, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a shipping method\'s zones.
     * @summary Update shipping method zones
     * @param {string} shippingMethodId
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public putShippingShippingMethodIdZones(shippingMethodId: string, inlineObject31?: InlineObject31, options?: any) {
        return ShippingApiFp(this.configuration).putShippingShippingMethodIdZones(shippingMethodId, inlineObject31, options).then((request) => request(this.axios, this.basePath));
    }

}
